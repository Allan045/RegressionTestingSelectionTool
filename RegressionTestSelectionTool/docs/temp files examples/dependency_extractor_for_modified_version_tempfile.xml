<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE dependencies SYSTEM "http://depfind.sourceforge.net/dtd/dependencies.dtd">

<dependencies>
    <package confirmed="no">
        <name></name>
        <class confirmed="no">
            <name>B[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testByteArrayFrom(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testNullXform(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testShortArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(com.fasterxml.jackson.databind.JavaType)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(java.lang.Class)</inbound>
        </class>
        <class confirmed="no">
            <name>C[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(com.fasterxml.jackson.databind.JavaType)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(java.lang.Class)</inbound>
        </class>
        <class confirmed="no">
            <name>D[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
        </class>
        <class confirmed="no">
            <name>F[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
        </class>
        <class confirmed="no">
            <name>I[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testShortArrayToX()</inbound>
        </class>
        <class confirmed="no">
            <name>J[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testShortArrayToX()</inbound>
        </class>
        <class confirmed="no">
            <name>S[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
        </class>
        <class confirmed="no">
            <name>Z[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.annotation</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonAnyGetter</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.getProperties()</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonCreator</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$InsensitiveCreator.CaseInsensitiveDeserTest$InsensitiveCreator(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar.FailingDelegatingCreator254Test$Bar(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.BuilderWithJAXB291Test$Address$AddressBuilder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonCreator$Mode</name>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonCreator$Mode.DELEGATING</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar.FailingDelegatingCreator254Test$Bar(int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonFilter</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonFormat</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonFormat$Shape</name>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonFormat$Shape.OBJECT</name>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonIdentityInfo</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.node</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonIgnoreProperties</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value.forIgnoreUnknown(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonInclude</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.property</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonInclude$Include</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonInclude$Include.NON_EMPTY</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.property</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonInclude$Include.NON_NULL</name>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonProperty</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$InsensitiveCreator.CaseInsensitiveDeserTest$InsensitiveCreator(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar.restrictedBarProperty</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.bars</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.restrictedFooProperty</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.assignB(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test$TestList.list</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.BuilderWithJAXB291Test$Address$AddressBuilder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.points</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$RoomName.names</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Main.stack</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.height</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.width</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack.slot</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.booleanA</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.id</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonPropertyOrder</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonRootName</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonSetter</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorWrapper.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$PointWrapper.p</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.noNulls</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.setNoNulls(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.c(int)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonSetter$Value</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonSetter$Value.forValueNulls(com.fasterxml.jackson.annotation.Nulls)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonSubTypes</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.proxy</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonSubTypes$Type</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.proxy</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonTypeInfo</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.value</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassObject</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.proxy</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassObject</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassProperty</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonTypeInfo$As</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonTypeInfo$As.PROPERTY</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.value</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassProperty</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonTypeInfo$As.WRAPPER_ARRAY</name>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonTypeInfo$As.WRAPPER_OBJECT</name>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassObject</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.proxy</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassObject</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonTypeInfo$Id</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.typeProperty(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonTypeInfo$Id.CLASS</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.value</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassObject</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassObject</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassProperty</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonTypeInfo$Id.MINIMAL_CLASS</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonTypeInfo$Id.NAME</name>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.proxy</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonTypeInfo$Id.getDefaultPropertyName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.typeProperty(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonTypeInfo$Id.ordinal()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.JsonTypeInfo$Id.values()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonTypeName</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooBad</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooGood</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$LaptopComputer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$EmptyProxy</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonUnwrapped</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.location</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.location</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.location</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.JsonView</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar.restrictedBarProperty</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.bars</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.restrictedFooProperty</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.Nulls</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.Nulls.AS_EMPTY</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorWrapper.value</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$PointWrapper.p</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.annotation.Nulls.SKIP</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.noNulls</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.setNoNulls(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.node</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.annotation.ObjectIdGenerators$PropertyGenerator</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.core</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.Base64Variant</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.Base64Variant.encode(byte[], boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.FormatFeature</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonEncoding</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonEncoding.UTF8</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonFactory</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.copy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest._jsonFactory</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._jsonFactory</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonFactory.JsonFactory()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.core.ObjectCodec)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.ObjectCodec)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.Writer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonGenerationException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerationException.JsonGenerationException(java.lang.String, com.fasterxml.jackson.core.JsonGenerator)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerationException.JsonGenerationException(java.lang.String, java.lang.Throwable, com.fasterxml.jackson.core.JsonGenerator)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerationException.JsonGenerationException(java.lang.Throwable, com.fasterxml.jackson.core.JsonGenerator)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonGenerator</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createGenerator(java.io.Writer, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(javax.xml.stream.XMLStreamWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.String, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.overrideFormatFeatures(int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndArray(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartArray(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator.close()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator.writeEndObject()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[], int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator.writeStartObject()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator.writeString(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.String, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonGenerator$Feature</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator$Feature.AUTO_CLOSE_JSON_CONTENT</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator$Feature.AUTO_CLOSE_TARGET</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator$Feature.FLUSH_PASSED_TO_STREAM</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonGenerator$Feature.WRITE_BIGDECIMAL_AS_PLAIN</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonLocation</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentLocation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTokenLocation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getStartLocation(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(org.codehaus.stax2.XMLStreamLocation2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentLocation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getTokenLocation()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonLocation.JsonLocation(java.lang.Object, long, int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getStartLocation(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(org.codehaus.stax2.XMLStreamLocation2)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonParseException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParseException.JsonParseException(com.fasterxml.jackson.core.JsonParser, java.lang.String, java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonParser</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyFieldName(com.fasterxml.jackson.core.JsonParser, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideFormatFeatures(int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.close()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.getCodec()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.getCurrentName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyFieldName(com.fasterxml.jackson.core.JsonParser, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.getCurrentToken()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.getText()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyFieldName(com.fasterxml.jackson.core.JsonParser, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.getTextCharacters()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.getTextLength()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.getTextOffset()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.getValueAsString(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.hasToken(com.fasterxml.jackson.core.JsonToken)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser.nextToken()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonParser$Feature</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonParser$Feature.AUTO_CLOSE_SOURCE</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonParser$NumberType</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getNumberType()</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonProcessingException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonStreamContext</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getParsingContext()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getParent()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonStreamContext.JsonStreamContext()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonStreamContext.inArray()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonStreamContext.inObject()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.JsonToken</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextToken</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.END_ARRAY</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.END_OBJECT</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.FIELD_NAME</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.START_ARRAY</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.START_OBJECT</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.VALUE_NULL</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.VALUE_STRING</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.asString()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.isScalarValue()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.ordinal()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.JsonToken.values()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.ObjectCodec</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.copy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._objectCodec</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCodec()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.ObjectCodec.readTree(com.fasterxml.jackson.core.JsonParser)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.ObjectCodec.treeToValue(com.fasterxml.jackson.core.TreeNode, java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.PrettyPrinter</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper._defaultPrettyPrinter()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._constructDefaultPrettyPrinter()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.PrettyPrinter.writeEndArray(com.fasterxml.jackson.core.JsonGenerator, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.PrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.PrettyPrinter.writeStartArray(com.fasterxml.jackson.core.JsonGenerator)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.PrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.SerializableString</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(com.fasterxml.jackson.core.SerializableString)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.SerializableString.getValue()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(com.fasterxml.jackson.core.SerializableString)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.TreeNode</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.Version</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.VERSION</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.version()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.version()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.version()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.version()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.version()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.version()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.Version.Version(int, int, int, java.lang.String, java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.Version.isUnknownVersion()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.Version.toFullString()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.Version.unknownVersion()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.version()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.version()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.Versioned</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.testMapperVersions()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.Versioned.version()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.core.base</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.base.GeneratorBase</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.base.GeneratorBase.GeneratorBase(int, com.fasterxml.jackson.core.ObjectCodec)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.base.GeneratorBase.close()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.base.ParserMinimalBase</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.base.ParserMinimalBase.ParserMinimalBase(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.core.format</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.format.DataFormatDetector</name>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.format.DataFormatMatcher</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.DataFormatMatcher.createParserWithMatch()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.DataFormatMatcher.getMatch()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchStrength()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchedFormatName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.DataFormatMatcher.hasMatch()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.format.InputAccessor</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.skipSpace(com.fasterxml.jackson.core.format.InputAccessor, byte)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.validXmlNameStartChar(com.fasterxml.jackson.core.format.InputAccessor, byte)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.InputAccessor.hasMoreBytes()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.skipSpace(com.fasterxml.jackson.core.format.InputAccessor, byte)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.InputAccessor.nextByte()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.skipSpace(com.fasterxml.jackson.core.format.InputAccessor, byte)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.format.MatchStrength</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.MatchStrength.INCONCLUSIVE</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.MatchStrength.NO_MATCH</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.core.io</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.io.CharTypes</name>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.io.CharTypes.appendQuoted(java.lang.StringBuilder, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.io.IOContext</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createGenerator(java.io.Writer, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._ioContext</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._ioContext</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.io.IOContext.getSourceReference()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.io.IOContext.isResourceManaged()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.io.IOContext.setEncoding(com.fasterxml.jackson.core.JsonEncoding)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.io.InputDecorator</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.io.InputDecorator.decorate(com.fasterxml.jackson.core.io.IOContext, java.io.Reader)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.io.SerializedString</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.core.json</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.json.JsonWriteContext</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.inRoot()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRepeatedFieldName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.json.JsonWriteContext.createChildArrayContext()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.json.JsonWriteContext.createChildObjectContext()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.json.JsonWriteContext.getEntryCount()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.json.JsonWriteContext.getParent()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.json.JsonWriteContext.inArray()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.json.JsonWriteContext.inObject()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.json.JsonWriteContext.inRoot()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.inRoot()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.json.JsonWriteContext.typeDesc()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.json.JsonWriteContext.writeFieldName(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRepeatedFieldName()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.json.JsonWriteContext.writeValue()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.core.type</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.type.TypeReference</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.core.type.TypeReference)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$1</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$2</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$3</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$4</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$5</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$6</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$1</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$2</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.type.TypeReference.TypeReference()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$1.NullConversionsGenericTest$1(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$2.NullConversionsGenericTest$2(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$3.NullConversionsGenericTest$3(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$4.NullConversionsGenericTest$4(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$5.NullConversionsGenericTest$5(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$6.NullConversionsGenericTest$6(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$1.ArrayConversionsTest$1(com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$2.ArrayConversionsTest$2(com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.core.util</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.util.ByteArrayBuilder</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._byteArrayBuilder</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._getByteArrayBuilder()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.util.ByteArrayBuilder.ByteArrayBuilder()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._getByteArrayBuilder()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.util.ByteArrayBuilder.reset()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._getByteArrayBuilder()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.util.ByteArrayBuilder.toByteArray()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.util.Instantiatable</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.core.util.VersionUtil</name>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.util.VersionUtil.parseVersion(java.lang.String, java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.core.util.VersionUtil.throwInternal()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createGenerator(java.io.Writer, com.fasterxml.jackson.core.io.IOContext)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.AnnotationIntrospector</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._constructIntrospector()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.XmlAnnotationIntrospector$Pair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.AnnotationIntrospector.allIntrospectors()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.AnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.BeanDescription</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.BeanDescription.getClassInfo()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.BeanProperty</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.DatabindContext</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.DeserializationConfig</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.DeserializationConfig.getAnnotationIntrospector()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.DeserializationContext</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.DeserializationContext.constructType(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.DeserializationContext.getBase64Variant()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.DeserializationContext.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JavaType)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class, com.fasterxml.jackson.core.JsonParser)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.DeserializationFeature</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.JavaType</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.core.type.TypeReference)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.XmlTypeResolverBuilder$XmlClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._type</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(com.fasterxml.jackson.databind.JavaType)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JavaType.getRawClass()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(com.fasterxml.jackson.databind.JavaType)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JavaType.isContainerType()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(com.fasterxml.jackson.databind.JavaType)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JavaType.isMapLikeType()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(com.fasterxml.jackson.databind.JavaType)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.JsonDeserializer</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.newDelegatingInstance(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.newDelegatingInstance(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonDeserializer.handledType()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.JsonMappingException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonMappingException.JsonMappingException(java.io.Closeable, java.lang.String, java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonMappingException.from(com.fasterxml.jackson.core.JsonGenerator, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonMappingException.from(com.fasterxml.jackson.core.JsonGenerator, java.lang.String, java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonMappingException.prependPath(com.fasterxml.jackson.databind.JsonMappingException$Reference)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.JsonMappingException$Reference</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonMappingException$Reference.JsonMappingException$Reference(java.lang.Object, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.JsonNode</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.testMixed226()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonNode.asText()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonNode.get(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonNode.path(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.JsonSerializer</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.MapperFeature</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.CaseInsensitiveDeserTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.CaseInsensitiveDeser273Test()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.CaseInsensitiveDeserTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.CaseInsensitiveDeser273Test()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.Module</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.Module.Module()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.BuilderSimpleTest$NopModule1557()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.Module$SetupContext</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.Module$SetupContext.addBeanDeserializerModifier(com.fasterxml.jackson.databind.deser.BeanDeserializerModifier)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.Module$SetupContext.addBeanSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.Module$SetupContext.getOwner()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.Module$SetupContext.insertAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ObjectMapper</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.copy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.CaseInsensitiveDeserTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.INSENSITIVE_MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.CaseInsensitiveDeser273Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.INSENSITIVE_MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.testCaseInsensitiveComplex()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.ListDeserializationTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.UnwrappedListWithEmptyCData129Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testByteArrayFrom(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testNullXform(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testArrayIdentityTransforms()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testByteArrayFrom()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testNullXform()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testShortArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyByteArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, byte[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, double[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyFloatArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, float[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, int[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyLongArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, long[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyShortArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, short[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.databind.ser.DefaultSerializerProvider, com.fasterxml.jackson.databind.deser.DefaultDeserializationContext)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlMapper)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.configOverride(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.MapperFeature, boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.convertValue(java.lang.Object, java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testNullXform(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.MapperFeature[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.readTree(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.readValue(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.JavaType)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.testCaseInsensitiveComplex()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.readerFor(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.writeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(javax.xml.stream.XMLStreamWriter, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.File, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.writerFor(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectMapper.writerWithView(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ObjectReader</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectReader.readValue(byte[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectReader.readValue(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectReader.withFormatDetection(com.fasterxml.jackson.databind.ObjectReader[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ObjectWriter</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectWriter.with(com.fasterxml.jackson.core.FormatFeature)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectWriter.withDefaultPrettyPrinter()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectWriter.withRootName(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.PropertyName</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._qname(com.fasterxml.jackson.databind.PropertyName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.PropertyName.NO_NAME</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.PropertyName.PropertyName(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.PropertyName.USE_DEFAULT</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.PropertyName.construct(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.PropertyName.getNamespace()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._qname(com.fasterxml.jackson.databind.PropertyName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.PropertyName.getSimpleName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._qname(com.fasterxml.jackson.databind.PropertyName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.PropertyNamingStrategy</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy</name>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy.PropertyNamingStrategy$UpperCamelCaseStrategy()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.SerializationConfig</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.createInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.SerializationConfig.getAnnotationIntrospector()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.SerializationConfig.getFullRootName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.SerializationConfig.getSerializationFeatures()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.SerializationConfig.withDefaultPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.SerializationFeature</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.ListDeserializationTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.UnwrappedListWithEmptyCData129Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.setUp()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.ListDeserializationTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.UnwrappedListWithEmptyCData129Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.setUp()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.SerializerProvider</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.String, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.SerializerProvider.getActiveView()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.annotation</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.annotation.JsonDeserialize</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.cfg</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.cfg.MapperConfig</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.cfg.MapperConfig.getAnnotationIntrospector()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.cfg.MapperConfig.getTypeFactory()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.cfg.MutableConfigOverride</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.cfg.MutableConfigOverride.setIgnorals(com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.cfg.MutableConfigOverride.setSetterInfo(com.fasterxml.jackson.annotation.JsonSetter$Value)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.deser</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.deser.BeanDeserializerBase</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.BeanDeserializerBase.findProperty(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getValueInstantiator()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getValueType()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.BeanDeserializerBase.properties()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.deser.BeanDeserializerModifier</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.BeanDeserializerModifier.BeanDeserializerModifier()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.XmlBeanDeserializerModifier(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.deser.DefaultDeserializationContext</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.deser.SettableBeanProperty</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextProperty</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserializeAndSet(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.SettableBeanProperty.getFullName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.SettableBeanProperty.getMember()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.SettableBeanProperty.getName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.SettableBeanProperty.getPropertyIndex()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.SettableBeanProperty.getType()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.SettableBeanProperty.getWrapperName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.deser.ValueInstantiator</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._valueInstantiator</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.ValueInstantiator.canCreateFromString()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.ValueInstantiator.createUsingDefault(com.fasterxml.jackson.databind.DeserializationContext)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.deser.std</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer.DelegatingDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.deser.std.StdDeserializer</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.std.StdDeserializer.StdDeserializer(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.TestSerializerCustom$ItemDeserializer()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.StdScalarDeserializer(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.XmlStringDeserializer()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.exc</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.getPropertyName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.introspect</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.introspect.Annotated</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.Annotated.getAnnotation(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.Annotated.hasAnnotation(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.introspect.AnnotatedClass</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.AnnotatedClass.getAnnotation(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.introspect.AnnotatedMember</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair.AnnotationIntrospectorPair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.XmlAnnotationIntrospector$Pair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getPrimaryMember()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getWrapperName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.withSimpleName(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.JacksonAnnotationIntrospector()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.JacksonXmlAnnotationIntrospector(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector.NopAnnotationIntrospector()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.BuilderSimpleTest$NopModule1557$1(com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.jsontype</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.jsontype.TypeDeserializer</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.jsontype.TypeIdResolver</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.typeProperty(java.lang.String)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.jsontype.TypeSerializer</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeInclusion()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.jsontype.impl</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.ClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.XmlTypeResolverBuilder$XmlClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.idFromValue(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.idFromValue(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver.MinimalClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver.idFromValue(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.idFromValue(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._constructStdTypeResolverBuilder()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.typeProperty(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.StdTypeResolverBuilder()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlTypeResolverBuilder()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.module</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.module.SimpleModule</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.module.SimpleModule.SimpleModule(java.lang.String, com.fasterxml.jackson.core.Version)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.module.SimpleModule.addDeserializer(java.lang.Class, com.fasterxml.jackson.databind.JsonDeserializer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.module.SimpleModule.addSerializer(java.lang.Class, com.fasterxml.jackson.databind.JsonSerializer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.module.SimpleModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.ser</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.AnyGetterWriter</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.asArraySerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.AnyGetterWriter.getAndSerialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.BeanPropertyWriter</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._orderAttributesFirst(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.BeanPropertyWriter.BeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getInternalSetting(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getMember()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getType()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getWrapperName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.BeanPropertyWriter.setInternalSetting(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.BeanSerializerModifier</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.BeanSerializerModifier.BeanSerializerModifier()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.XmlBeanSerializerModifier()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.DefaultSerializerProvider</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testSerializerProviderCopy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.copy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.createInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testSerializerProviderCopy()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.FilterProvider</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.PropertyFilter</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.PropertyFilter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.ser.PropertyWriter)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.PropertyWriter</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.SerializerFactory</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.createInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.ser.impl</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer</name>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer.BeanAsArraySerializer(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.asArraySerializer()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.asArraySerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.serializerFor(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.serializeAllExcept(java.lang.String[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter(java.lang.String, com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.impl.WritableObjectId</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.ser.std</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.asArraySerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withIgnorals(java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.asArraySerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withIgnorals(java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, java.util.Set)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.std.StdScalarSerializer</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.StdScalarSerializer(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.TestSerialization$CustomSerializer()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.ser.std.StdSerializer</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.TestSerializerCustom$ItemSerializer(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.type</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.type.ClassKey</name>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.type.ClassKey.ClassKey(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.type.CollectionType</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.type.TypeFactory</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.core.type.TypeReference)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.XmlTypeResolverBuilder$XmlClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class, java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.type.TypeFactory.constructType(com.fasterxml.jackson.core.type.TypeReference)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.core.type.TypeReference)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.databind.util</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.util.LRUMap</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.XmlRootNameLookup()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._rootNames</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.readResolve()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.util.LRUMap.LRUMap(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.XmlRootNameLookup()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.util.LRUMap.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.databind.util.LRUMap.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.util.NameTransformer</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._nameTransformer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.databind.util.TokenBuffer</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.DEFAULT_USE_WRAPPER</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.JacksonXmlAnnotationIntrospector()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.JacksonXmlAnnotationIntrospector(boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.JacksonXmlAnnotationIntrospector(boolean)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.JacksonAnnotationIntrospector()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._cfgDefaultUseWrapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.JacksonXmlAnnotationIntrospector()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._constructIntrospector()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._cfgDefaultUseWrapper</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.JacksonXmlAnnotationIntrospector(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.setDefaultUseWrapper(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._constructStdTypeResolverBuilder()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlTypeResolverBuilder()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.construct(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty.localName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty.namespace()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.USE_DEFAULT</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated.hasAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.USE_DEFAULT</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated.hasAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty.namespace()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.PropertyName(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.USE_DEFAULT</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotatedClass</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotatedClass.getAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement.localName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement.namespace()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.NO_NAME</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.USE_DEFAULT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.construct(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated.getAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._cfgDefaultUseWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper.localName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper.namespace()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper.useWrapping()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty.isAttribute()</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData.value()</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText.value()</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.setDefaultUseWrapper(boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._cfgDefaultUseWrapper</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.module.SimpleModule</outbound>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_MODULE</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper._xmlModule</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.xmlMapper(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Version</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.module.SimpleModule</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.module.SimpleModule.SimpleModule(java.lang.String, com.fasterxml.jackson.core.Version)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgDefaultUseWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.addDeserializer(java.lang.Class, com.fasterxml.jackson.databind.JsonDeserializer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.VERSION</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.XmlStringDeserializer()</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.xmlMapper(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgDefaultUseWrapper</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._constructIntrospector()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setDefaultUseWrapper(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgNameForTextElement</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setXMLTextElementName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._constructIntrospector()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.JacksonXmlAnnotationIntrospector(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgDefaultUseWrapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.addDeserializer(java.lang.Class, com.fasterxml.jackson.databind.JsonDeserializer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.addSerializer(java.lang.Class, com.fasterxml.jackson.databind.JsonSerializer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setDefaultUseWrapper(boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgDefaultUseWrapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.xmlMapper(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setXMLTextElementName(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgNameForTextElement</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.Module$SetupContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.Module$SetupContext.addBeanDeserializerModifier(com.fasterxml.jackson.databind.deser.BeanDeserializerModifier)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.Module$SetupContext.addBeanSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.Module$SetupContext.getOwner()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.Module$SetupContext.insertAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerModifier</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.module.SimpleModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanSerializerModifier</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._constructIntrospector()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.XmlBeanDeserializerModifier(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.XmlBeanSerializerModifier()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.MapperCopyTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertEquals(java.lang.String, int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertNotSame(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testSerializerProviderCopy()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.newMapper()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.MapperFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest$Pojo282.MapperCopyTest$Pojo282()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.fail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.newMapper()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.copy()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.databind.MapperFeature[])</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.contains(java.lang.CharSequence)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig.getSerializationFeatures()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertEquals(java.lang.String, int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertNotSame(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLTextElementName()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.copy()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.databind.SerializationFeature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.getSerializationConfig()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_DECLARATION</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.newMapper()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLTextElementName()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.ByteArrayOutputStream()</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.toByteArray()</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.readObject()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.writeObject(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testSerializerProviderCopy()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.assertNotSame(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.XmlRootNameLookup()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest$Pojo282</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest$Pojo282.MapperCopyTest$Pojo282()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest$Pojo282.a</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MapperCopyTest$Pojo282.a</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest$Pojo282.MapperCopyTest$Pojo282()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.MediaItem</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem.MediaItem()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem.MediaItem(com.fasterxml.jackson.dataformat.xml.MediaItem$Content)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem._content</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem._content</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.MediaItem(com.fasterxml.jackson.dataformat.xml.MediaItem$Content)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.getContent()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.setContent(com.fasterxml.jackson.dataformat.xml.MediaItem$Content)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem._photos</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.addPhoto(com.fasterxml.jackson.dataformat.xml.MediaItem$Photo)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.getImages()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.setImages(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem.addPhoto(com.fasterxml.jackson.dataformat.xml.MediaItem$Photo)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem._photos</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem.getContent()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem._content</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem.getImages()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem._photos</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem.setContent(com.fasterxml.jackson.dataformat.xml.MediaItem$Content)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem._content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem.setImages(java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem._photos</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.MediaItem(com.fasterxml.jackson.dataformat.xml.MediaItem$Content)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem._content</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.getContent()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.setContent(com.fasterxml.jackson.dataformat.xml.MediaItem$Content)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.MediaItem$Content()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content._bitrate</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getBitrate()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setBitrate(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content._copyright</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getCopyright()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setCopyright(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content._duration</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getDuration()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setDuration(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content._format</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getFormat()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setFormat(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content._height</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getHeight()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setHeight(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content._persons</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.addPerson(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getPersons()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setPersons(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content._player</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getPlayer()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setPlayer(com.fasterxml.jackson.dataformat.xml.MediaItem$Player)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content._size</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getSize()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setSize(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content._title</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getTitle()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setTitle(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content._uri</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getUri()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setUri(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content._width</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getWidth()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setWidth(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.addPerson(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._persons</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getBitrate()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._bitrate</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getCopyright()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._copyright</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getDuration()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._duration</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getFormat()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._format</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getHeight()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._height</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getPersons()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._persons</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getPlayer()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._player</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getSize()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getTitle()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._title</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getUri()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._uri</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getWidth()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._width</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setBitrate(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._bitrate</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setCopyright(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._copyright</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setDuration(long)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._duration</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setFormat(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._format</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setHeight(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._height</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setPersons(java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._persons</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setPlayer(com.fasterxml.jackson.dataformat.xml.MediaItem$Player)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._player</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setSize(long)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setTitle(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._title</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setUri(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._uri</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setWidth(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._width</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.addPhoto(com.fasterxml.jackson.dataformat.xml.MediaItem$Photo)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo(java.lang.String, java.lang.String, int, int, com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._height</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._size</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._title</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._uri</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._width</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._height</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo(java.lang.String, java.lang.String, int, int, com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getHeight()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setHeight(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._size</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo(java.lang.String, java.lang.String, int, int, com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getSize()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setSize(com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._title</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo(java.lang.String, java.lang.String, int, int, com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getTitle()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setTitle(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._uri</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo(java.lang.String, java.lang.String, int, int, com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getUri()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setUri(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._width</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo(java.lang.String, java.lang.String, int, int, com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getWidth()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setWidth(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getHeight()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._height</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getSize()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._size</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getTitle()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._title</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getUri()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._uri</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getWidth()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._width</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setHeight(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._height</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setSize(com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._size</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setTitle(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._title</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setUri(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._uri</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setWidth(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._width</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Player</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._player</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getPlayer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setPlayer(com.fasterxml.jackson.dataformat.xml.MediaItem$Player)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Player.$VALUES</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Player.FLASH</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Player.JAVA</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Player.MediaItem$Player(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Player.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.FLASH</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.JAVA</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.MediaItem$Player(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Player.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Player.values()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.$VALUES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.dataformat.xml.MediaItem$Player[]</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MediaItem$Player[].clone()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Player[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.values()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Player[].clone()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Size</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo(java.lang.String, java.lang.String, int, int, com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._size</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getSize()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setSize(com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Size.$VALUES</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Size.LARGE</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Size.MediaItem$Size(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Size.SMALL</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Size.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.LARGE</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.MediaItem$Size(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.SMALL</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Size.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Size.values()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.$VALUES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.dataformat.xml.MediaItem$Size[]</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.MediaItem$Size[].clone()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Size[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.values()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.MediaItem$Size[].clone()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.PackageVersion</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Versioned</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.PackageVersion.PackageVersion()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.PackageVersion.VERSION</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Version</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.version()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.version()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.version()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.version()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.PackageVersion.static {}</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Version</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.util.VersionUtil.parseVersion(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.VERSION</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.PackageVersion.version()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Version</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.VERSION</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.RoundtripContentTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.RoundtripContentTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.RoundtripContentTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.MAPPER</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectReader</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectReader.readValue(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getTitle()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.getContent()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readerFor(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.withDefaultPrettyPrinter()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.MediaItem$Content()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.addPerson(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setTitle(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo(java.lang.String, java.lang.String, int, int, com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.LARGE</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.SMALL</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.MediaItem(com.fasterxml.jackson.dataformat.xml.MediaItem$Content)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.addPhoto(com.fasterxml.jackson.dataformat.xml.MediaItem$Photo)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.MAPPER</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writerFor(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.VersionInfoTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.VersionInfoTest.VersionInfoTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertFalse(java.lang.String, boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Version</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.Version.isUnknownVersion()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.Version.toFullString()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Versioned</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.Versioned.version()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.VERSION</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertFalse(java.lang.String, boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.testMapperVersions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.VersionInfoTest.testMapperVersions()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Versioned</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.XmlAnnotationIntrospector$Pair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlPrimary</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlSecondary</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.setDefaultUseWrapper(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.setDefaultUseWrapper(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.setDefaultUseWrapper(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.XmlAnnotationIntrospector$JaxbWrapper(com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper._intr</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.XmlAnnotationIntrospector$Pair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper._intr</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.XmlAnnotationIntrospector$JaxbWrapper(com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper._intr</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper._intr</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper._intr</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.setDefaultUseWrapper(boolean)</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.XmlAnnotationIntrospector$Pair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair.AnnotationIntrospectorPair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.XmlAnnotationIntrospector$JaxbWrapper(com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlPrimary</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlSecondary</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlPrimary</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.XmlAnnotationIntrospector$Pair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.setDefaultUseWrapper(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlSecondary</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.XmlAnnotationIntrospector$Pair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.setDefaultUseWrapper(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlPrimary</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlSecondary</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.XmlAnnotationIntrospector$Pair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlPrimary</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlSecondary</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlPrimary</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlSecondary</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlPrimary</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlSecondary</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.setDefaultUseWrapper(boolean)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlPrimary</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlSecondary</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.setDefaultUseWrapper(boolean)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlFactory</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(javax.xml.stream.XMLInputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(javax.xml.stream.XMLStreamWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest._xmlFactory</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._xmlFactory</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_D</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_EXCL</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_HYPHEN</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_LT</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_QMARK</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_l</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_m</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_x</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.DEFAULT_XML_GENERATOR_FEATURE_FLAGS</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.DEFAULT_XML_PARSER_FEATURE_FLAGS</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.FORMAT_NAME_XML</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.UTF8_BOM_1</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.UTF8_BOM_2</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.UTF8_BOM_3</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.testMapperVersions()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.ObjectCodec)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlOutputFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.newInstance()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.setProperty(java.lang.String, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLOutputFactory.newInstance()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.DEFAULT_XML_GENERATOR_FEATURE_FLAGS</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.DEFAULT_XML_PARSER_FEATURE_FLAGS</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.core.ObjectCodec)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlOutputFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.copy()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(javax.xml.stream.XMLInputFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLTextElementName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLTextElementName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._checkInvalidCopy(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.copy()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._createContext(java.lang.Object, boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._createGenerator(java.io.Writer, com.fasterxml.jackson.core.io.IOContext)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.util.VersionUtil.throwInternal()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._objectCodec</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._parserFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setXMLTextElementName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.createXMLStreamReader(javax.xml.transform.Source)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="class" confirmed="no">javax.xml.transform.Source</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.io.Stax2ByteArraySource.Stax2ByteArraySource(byte[], int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._objectCodec</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._parserFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setXMLTextElementName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.createXMLStreamReader(javax.xml.transform.Source)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="class" confirmed="no">javax.xml.transform.Source</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.io.Stax2CharArraySource.Stax2CharArraySource(char[], int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._objectCodec</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._parserFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setXMLTextElementName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._objectCodec</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._parserFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setXMLTextElementName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.Reader)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlOutputFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(java.io.OutputStream, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlOutputFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(java.io.Writer)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._generatorFeatures</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.setProperty(java.lang.String, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLOutputFactory.setProperty(java.lang.String, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamReader.next()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamWriter.setDefaultNamespace(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._inputDecorator</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlInFactory</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(java.io.ObjectInputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlOutFactory</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(java.io.ObjectInputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._objectCodec</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._parserFeatures</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory</name>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLInputFactory()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLInputFactory(javax.xml.stream.XMLInputFactory)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlOutputFactory</name>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLOutputFactory()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLOutputFactory(javax.xml.stream.XMLOutputFactory)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.canUseCharArrays()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.copy()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._checkInvalidCopy(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonEncoding</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.io.IOContext.setEncoding(com.fasterxml.jackson.core.JsonEncoding)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._createContext(java.lang.Object, boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._generatorFeatures</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._objectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.FileOutputStream.FileOutputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonEncoding</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonEncoding.UTF8</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonEncoding</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.io.IOContext.setEncoding(com.fasterxml.jackson.core.JsonEncoding)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._createContext(java.lang.Object, boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._generatorFeatures</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._objectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._createContext(java.lang.Object, boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._generatorFeatures</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._objectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._createContext(java.lang.Object, boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._generatorFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._objectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(javax.xml.stream.XMLStreamWriter, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.io.Reader)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.InputDecorator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.io.InputDecorator.decorate(com.fasterxml.jackson.core.io.IOContext, java.io.Reader)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._createContext(java.lang.Object, boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._inputDecorator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.io.StringReader.StringReader(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._createContext(java.lang.Object, boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._objectCodec</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._parserFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setXMLTextElementName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamReader.getEventType()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.getMask()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.getMask()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatReadFeatureType()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatWriteFeatureType()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLInputFactory()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLOutputFactory()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlOutputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLTextElementName()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.hasFormat(com.fasterxml.jackson.core.format.InputAccessor)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.InputAccessor</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.InputAccessor</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.InputAccessor.hasMoreBytes()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.InputAccessor.nextByte()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.INCONCLUSIVE</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.NO_MATCH</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.skipSpace(com.fasterxml.jackson.core.format.InputAccessor, byte)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.validXmlNameStartChar(com.fasterxml.jackson.core.format.InputAccessor, byte)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.getMask()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(java.io.ObjectInputStream)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlInFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlOutFactory</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.ObjectInputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.defaultReadObject()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.readUTF()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlInFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlOutFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory._objectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.newInstance()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.InstantiationException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.requiresCustomCodec()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLInputFactory(javax.xml.stream.XMLInputFactory)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLOutputFactory(javax.xml.stream.XMLOutputFactory)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlOutputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLTextElementName(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.skipSpace(com.fasterxml.jackson.core.format.InputAccessor, byte)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.InputAccessor</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.InputAccessor.hasMoreBytes()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.InputAccessor.nextByte()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.DEFAULT_XML_GENERATOR_FEATURE_FLAGS</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.DEFAULT_XML_PARSER_FEATURE_FLAGS</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.collectDefaults()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.collectDefaults()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.InputAccessor</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.InputAccessor.hasMoreBytes()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.InputAccessor.nextByte()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.INCONCLUSIVE</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.NO_MATCH</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.validXmlNameStartChar(com.fasterxml.jackson.core.format.InputAccessor, byte)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.InputAccessor</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.version()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Version</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.VERSION</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlOutputFactory</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.ObjectOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.defaultWriteObject()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.writeUTF(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlMapper</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.RoundtripContentTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.newMapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.xmlMapper(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.CaseInsensitiveDeserTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.DeserErrorHandling236Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.EmptyStringValueTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.ExceptionDeserializationTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.NullConversionsGenericTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.NullConversionsSkipTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.SimpleStringValuesTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.TestDeserialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMapWithAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.TestEnums()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews._xmlMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testNullSuppression()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.BuilderSimpleTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testCustomWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testImmutable()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.CaseInsensitiveDeser273Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.EnumIssue9Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.FailingDelegatingCreator254Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._jaxbMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._nonJaxbMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.ListDeser294Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.PolymorphicIssue4Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.TestDeserialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.TestUntypedListSerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.testListAsObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.TypeAttributeOrder242Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.IncrementalWritingTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.PartialReadTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._jaxbMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._nonJaxbMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testRootName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testSerializeAsAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.DeserializePolyList178Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.EmptyListDeserTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.Issue101UnwrappedListAttributesTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.ListAnnotationSharingTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.ListDeserializationTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.ListRoundtripTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.ListSerializationTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testSimpleWrappedList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testStringList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.NestedUnwrappedLists180Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest._xmlMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.UnwrappedListWithEmptyCData129Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.WrappedListsTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.testEmptyList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testArrayIdentityTransforms()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testByteArrayFrom()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testNullXform()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.EmptyPolymorphicTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.ObjectId104Test()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest._xmlMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.RootNameTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest._xmlMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.TextValueTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.XmlTextTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.MAPPER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.TestBinaryStreamToXMLSerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith0Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith1Byte()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith2Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith3Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith4Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation._xmlMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testEmptyElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testWithAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.TestSerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization._xmlMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataStringArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttrAndElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleNsElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr._xmlMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue6()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testSimpleNsAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._xmlMapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_MODULE</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_PRETTY_PRINTER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.RoundtripContentTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.testMapperVersions()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.newMapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.DeserErrorHandling236Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.EmptyStringValueTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.ExceptionDeserializationTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.SimpleStringValuesTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.TestDeserialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.TestEnums()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.EnumIssue9Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.FailingDelegatingCreator254Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.testMixed226()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.TestDeserialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.testNoContent()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.TestUntypedListSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.TypeAttributeOrder242Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.DeserializePolyList178Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.EmptyListDeserTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.Issue101UnwrappedListAttributesTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.ListAnnotationSharingTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.ListDeserializationTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.ListRoundtripTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.ListSerializationTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.NestedUnwrappedLists180Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.UnwrappedListWithEmptyCData129Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testShortArrayToX()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.EmptyPolymorphicTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.ObjectId104Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.RootNameTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.TextValueTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.TestBinaryStreamToXMLSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.TestSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.testOrdering()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.xmlMapper(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_MODULE</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(javax.xml.stream.XMLInputFactory)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.Module</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.databind.ser.DefaultSerializerProvider, com.fasterxml.jackson.databind.deser.DefaultDeserializationContext)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig.withDefaultPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.DefaultDeserializationContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_PRETTY_PRINTER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._serializationConfig</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper._xmlModule</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.registerModule(com.fasterxml.jackson.databind.Module)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.XmlRootNameLookup()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlMapper)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper._xmlModule</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.copy()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(javax.xml.stream.XMLInputFactory)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper._checkInvalidCopy(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.copy()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper._defaultPrettyPrinter()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</outbound>
                <outbound type="class" confirmed="no">java.lang.Deprecated</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper._jsonFactory</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper._serializationConfig</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper._typeFactory</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.core.type.TypeReference)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper._xmlModule</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlMapper)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.databind.SerializationFeature, boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.setUp()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._jsonFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._jsonFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.convertValue(java.lang.Object, com.fasterxml.jackson.core.type.TypeReference)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.convertValue(java.lang.Object, java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.copy()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlMapper)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._checkInvalidCopy(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.databind.DeserializationFeature)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.databind.MapperFeature[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.databind.SerializationFeature)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._jsonFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._jsonFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.databind.MapperFeature[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.CaseInsensitiveDeserTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.CaseInsensitiveDeser273Test()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.databind.SerializationFeature)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.ListDeserializationTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.UnwrappedListWithEmptyCData129Test()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._jsonFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._jsonFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.getDeserializationConfig()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._jsonFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(javax.xml.stream.XMLStreamWriter, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.getSerializationConfig()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.getTypeFactory()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.readTree(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.testMixed226()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, com.fasterxml.jackson.core.type.TypeReference)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMapWithAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testCustomWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testImmutable()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.testNoContent()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.core.type.TypeReference)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory.constructType(com.fasterxml.jackson.core.type.TypeReference)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._typeFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readValue(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.JavaType)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.core.type.TypeReference)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._typeFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Type</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.readerFor(com.fasterxml.jackson.databind.JavaType)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.readerFor(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.registerModule(com.fasterxml.jackson.databind.Module)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.registerSubtypes(java.lang.Class[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.serialVersionUID</name>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector.allIntrospectors()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationConfig</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.DeserializationConfig.getAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.setDefaultUseWrapper(boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.getDeserializationConfig()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.setPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude$Include)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLTextElementName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper._jsonFactory</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.static {}</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_MODULE</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_PRETTY_PRINTER</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.version()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Version</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.VERSION</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(javax.xml.stream.XMLStreamWriter, java.lang.Object)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.writeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testNullSuppression()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.testListAsObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testRootName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testSerializeAsAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testSimpleWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testStringList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.testEmptyList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith0Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith1Byte()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith2Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith3Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith4Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testEmptyElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testWithAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataStringArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleNsElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue6()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testSimpleNsAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.testOrdering()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.writer()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.writer(com.fasterxml.jackson.databind.ser.FilterProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.writerFor(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlMapper.writerWithDefaultPrettyPrinter()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</name>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writePrologLinefeed(org.codehaus.stax2.XMLStreamWriter2)</name>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase</name>
            <outbound type="class" confirmed="no">junit.framework.TestCase</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_DOC_JSON_SPEC</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_HEIGHT</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_TITLE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_TN_HEIGHT</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_TN_ID1</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_TN_ID2</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_TN_ID3</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_TN_ID4</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_TN_URL</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_TN_WIDTH</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_WIDTH</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</name>
                <outbound type="feature" confirmed="no">junit.framework.TestCase.TestCase()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.MapperCopyTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.RoundtripContentTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.VersionInfoTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.TestIssue47Attribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.CaseInsensitiveDeserTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.DeserErrorHandling236Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.EmptyStringValueTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.ExceptionDeserializationTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.Issue274PropertyNameTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.NullConversionsGenericTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.NullConversionsSkipTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.SimpleStringValuesTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.TestBinaryData()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.TestDeserialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.TestEnums()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.TestViews()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.XmlTokenStreamTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.BuilderSimpleTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.CaseInsensitiveDeser273Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.EmptyListDeser124Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.EnumIssue9Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.FailingDelegatingCreator254Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.Issue37AdapterTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.ListDeser294Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.MixedContentTreeRead226Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.PolymorphicIssue4Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.PolymorphicList97Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.TestConflictingGetters()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.TestDeserialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.TestEmptyContent()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.TestUntypedListSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.TestUnwrappedDeserIssue86()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.TypeAttributeOrder242Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.IncrementalWritingTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.PartialReadTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.AttributesWithJAXBTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.BuilderWithJAXB291Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.ElementWrapperTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.JAXBObjectId170Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.WithJAXBAnnotationsTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.DeserializePolyList178Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.EmptyListDeserTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.Issue101UnwrappedListAttributesTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.ListAnnotationSharingTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.ListAsObjectTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.ListDeser191Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.ListDeserializationTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.ListRoundtripTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.ListSerializationTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.ListWithAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.NestedUnwrappedLists180Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.NestedUnwrappedListsTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.RootListHandlingTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.UnwrappedListWithEmptyCData129Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.UnwrappedListsTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.WrappedListsTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.ArrayConversionsTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.DTDSupportTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.EmptyPolymorphicTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.NodeTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.ObjectId104Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.PolymorphicTypesTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.RootNameTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.TextValueTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.UnwrappingWithXMLTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.XmlTextTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.TestBinaryStreamToXMLSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.TestIndentation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.TestJDKSerializability()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.TestNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.TestSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.TestSerializationAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.TestSerializationManual()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.TestSerializationOrdering()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.TestSerializerCustom()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.TestXmlDeclaration()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.FormatDetectionTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.XmlGeneratorTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.XmlParserNextXxxTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.XmlParserTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.aposToQuotes(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyFieldName(com.fasterxml.jackson.core.JsonParser, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertEquals(java.lang.String, java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonParser)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getCurrentToken()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonParser)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParseException</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getCurrentToken()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getText()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getTextCharacters()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getTextLength()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getTextOffset()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertEquals(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</name>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">javax.xml.bind.JAXB.marshal(java.lang.Object, java.io.Writer)</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.JAXBContext</outbound>
                <outbound type="feature" confirmed="no">javax.xml.bind.JAXBContext.createMarshaller()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.bind.JAXBContext.newInstance(java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.Marshaller</outbound>
                <outbound type="feature" confirmed="no">javax.xml.bind.Marshaller.marshal(java.lang.Object, java.io.Writer)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.newMapper()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</name>
                <outbound type="feature" confirmed="no">java.io.BufferedReader.BufferedReader(java.io.Reader)</outbound>
                <outbound type="feature" confirmed="no">java.io.BufferedReader.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.BufferedReader.readLine()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.FileInputStream.FileInputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.removeSjsxpNamespace(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.setUp()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.utf8Bytes(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyFieldName(com.fasterxml.jackson.core.JsonParser, java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getCurrentName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getText()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase.xmlMapper(boolean)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setDefaultUseWrapper(boolean)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser(java.lang.String, java.lang.String, boolean, com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender, byte[])</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.XmlTestBase$FiveMinuteUser$Name(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._gender</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._isVerified</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._userImage</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._gender</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser(java.lang.String, java.lang.String, boolean, com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender, byte[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.getGender()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.setGender(com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._isVerified</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser(java.lang.String, java.lang.String, boolean, com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender, byte[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.isVerified()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.setVerified(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._name</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser(java.lang.String, java.lang.String, boolean, com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender, byte[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.getName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.setName(com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._userImage</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser(java.lang.String, java.lang.String, boolean, com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender, byte[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.getUserImage()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.setUserImage(byte[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.equals(java.lang.Object)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._gender</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._isVerified</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._userImage</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.getGender()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._gender</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.getName()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.getUserImage()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._userImage</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.isVerified()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._isVerified</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.setGender(com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._gender</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.setName(com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.setUserImage(byte[])</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._userImage</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.setVerified(boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._isVerified</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser(java.lang.String, java.lang.String, boolean, com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender, byte[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._gender</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.getGender()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.setGender(com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.$VALUES</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.FEMALE</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.MALE</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.XmlTestBase$FiveMinuteUser$Gender(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.FEMALE</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.MALE</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.XmlTestBase$FiveMinuteUser$Gender(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.values()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.$VALUES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender[]</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender[].clone()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.values()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender[].clone()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser(java.lang.String, java.lang.String, boolean, com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender, byte[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser._name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.setName(com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.XmlTestBase$FiveMinuteUser$Name()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.XmlTestBase$FiveMinuteUser$Name(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._first</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._last</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser(java.lang.String, java.lang.String, boolean, com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender, byte[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._first</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.XmlTestBase$FiveMinuteUser$Name(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.getFirst()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.setFirst(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._last</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.XmlTestBase$FiveMinuteUser$Name(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.getLast()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.setLast(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.equals(java.lang.Object)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._first</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._last</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.getFirst()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._first</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.getLast()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._last</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.setFirst(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._first</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.setLast(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._last</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.TestIndentation$IntWrapperBean(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.wrapped</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper.XmlTestBase$IntWrapper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper.XmlTestBase$IntWrapper(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper.i</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.TestIndentation$IntWrapperBean(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper.i</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper.XmlTestBase$IntWrapper(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.XmlTestBase$NameBean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.XmlTestBase$NameBean(int, java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.age</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.first</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.last</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.age</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.XmlTestBase$NameBean(int, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.first</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.XmlTestBase$NameBean(int, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.last</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.XmlTestBase$NameBean(int, java.lang.String, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$PointWrapper.p</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.XmlTestBase$Point()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.XmlTestBase$Point(int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.y</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.equals(java.lang.Object)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.y</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.toString()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.y</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.XmlTestBase$Point(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.y</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.XmlTestBase$Point(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.text</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.text</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.toString()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.text</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.TestIndentation$StringWrapperBean(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.string</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper.XmlTestBase$StringWrapper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper.XmlTestBase$StringWrapper(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper.str</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.TestIndentation$StringWrapperBean(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper.str</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper.XmlTestBase$StringWrapper(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlTypeResolverBuilder()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.StdTypeResolverBuilder()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._constructStdTypeResolverBuilder()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._customIdResolver</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._idType</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.typeProperty(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._typeProperty</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.typeProperty(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.lastIndexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.lastIndexOf(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.replace(int, int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.lastIndexOf(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.lastIndexOf(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.replace(int, int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.idFromValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.idFromValue(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.ordinal()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.cfg.MapperConfig</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.cfg.MapperConfig.getTypeFactory()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeIdResolver</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1.$SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$Id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.XmlTypeResolverBuilder$XmlClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._customIdResolver</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._idType</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeIdResolver</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._typeProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.typeProperty(java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.getDefaultPropertyName()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._idType</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._typeProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1.$SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$Id</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1.static {}</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.CLASS</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.MINIMAL_CLASS</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.ordinal()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.values()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1.$SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$Id</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchFieldError</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.XmlTypeResolverBuilder$XmlClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.ClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.idFromValue(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.idFromValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DatabindContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver.MinimalClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.idFromValue(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver.idFromValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DatabindContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.adapters</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.TestIssue47Attribute()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item.id</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Response</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Response.items</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item.TestIssue47Attribute$Item()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item.a</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item.b</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item.id</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Response</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Response.TestIssue47Attribute$Response()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Response.items</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.annotation</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.ElementType.FIELD</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.ElementType.METHOD</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.ElementType.PARAMETER</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Retention</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.RetentionPolicy.RUNTIME</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Target</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringArrayBean.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringBean.value</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData.value()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.ElementType.FIELD</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.ElementType.METHOD</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Retention</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.RetentionPolicy.RUNTIME</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Target</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.element</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.sublevels</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooBad.bar</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.getBeanInfo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.getBeanOther()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.children</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Attr.param</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config.entry</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optionals.optional</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root.unwrapped</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.points</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$TestList.items</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanUnwrapped.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanWrapped.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.notes</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.getStuff()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optionals.optional</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.prop</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents.parent</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer.points</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.strings</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.firstBar</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.secondBar</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$RoomName.names</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Root.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record.fields</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records.records</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test$ListValues.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optionals.optional</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$Order.line_items</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company.employee</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO.v</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper.USE_PROPERTY_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper.localName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper.namespace()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper.useWrapping()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.ElementType.FIELD</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.ElementType.METHOD</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.ElementType.PARAMETER</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Retention</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.RetentionPolicy.RUNTIME</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Target</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.age</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Response.items</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.EventId</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject.event</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject.generated</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.first</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.number</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.sublevels</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo.data</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.getBeanInfo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.getBeanOther()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.a</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.children</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Entry.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.type</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root.unwrapped</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.type</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$ListItem.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$TestList.items</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.notes</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.getStuff()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.type</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.x</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.y</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer.points</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name.language</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Root.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Value.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.type</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$Order.line_items</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.a</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.x</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.location</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.phoneType</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed.units</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean.count</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2.count</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.attr</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttributeBean.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$NsElemBean.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.getProperties()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.booleanA</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$NsAttrBean.attr</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.b</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty.isAttribute()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty.localName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty.namespace()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.ElementType.TYPE</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Retention</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.RetentionPolicy.RUNTIME</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Target</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest$Pojo282</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$NsRootBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement.localName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement.namespace()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.ElementType.FIELD</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.ElementType.METHOD</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Retention</outbound>
            <outbound type="feature" confirmed="no">java.lang.annotation.RetentionPolicy.RUNTIME</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Target</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.number</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.number</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.number</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.number</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean.textValue</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.textValue</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.first</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.phoneNumber</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Radius.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed.value</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText.value()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.annotation.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.deser</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.CaseInsensitiveDeserTest()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.MapperFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.databind.MapperFeature[])</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.INSENSITIVE_MAPPER</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.newMapper()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.INSENSITIVE_MAPPER</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.CaseInsensitiveDeserTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.MAPPER</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.CaseInsensitiveDeserTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.newMapper()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.CaseInsensitiveDeserTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$BaseResponse</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$BaseResponse.debugMessage</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$BaseResponse.errorCode</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.INSENSITIVE_MAPPER</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.fail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.verifyException(java.lang.Throwable, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.verifyException(java.lang.Throwable, java.lang.String[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$BaseResponse</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$BaseResponse.CaseInsensitiveDeserTest$BaseResponse()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$BaseResponse.debugMessage</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$BaseResponse.errorCode</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$InsensitiveCreator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$InsensitiveCreator.CaseInsensitiveDeserTest$InsensitiveCreator(int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonCreator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$InsensitiveCreator.v</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$InsensitiveCreator.v</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$InsensitiveCreator.CaseInsensitiveDeserTest$InsensitiveCreator(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.DeserErrorHandling236Test()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.DeserErrorHandling236Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonProcessingException</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test$Employee</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.fail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.verifyException(java.lang.Throwable, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.verifyException(java.lang.Throwable, java.lang.String[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test$Employee</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test$Employee.DeserErrorHandling236Test$Employee()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test$Employee.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentWrapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._parent</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperNamespace</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._parent</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperNamespace</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.intermediateWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchingWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._parent</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getParent()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperLocalName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.isMatching()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperNamespace</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperNamespace()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getParent()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._parent</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperLocalName()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperName</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperNamespace()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperNamespace</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.intermediateWrapper()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.isMatching()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperName</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperNamespace</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchingWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.toString()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._parent</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperName</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.EmptyStringValueTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.EmptyStringValueTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.assertNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.first</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.last</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.assertNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.EMPTY_ELEMENT_AS_NULL</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.first</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.last</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.text</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.EmptyStringValueTest$Name()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.EmptyStringValueTest$Name(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.first</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.last</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.first</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.EmptyStringValueTest$Name(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.last</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.EmptyStringValueTest$Name(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names.EmptyStringValueTest$Names()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names.names</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names.names</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names.EmptyStringValueTest$Names()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.ExceptionDeserializationTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.ExceptionDeserializationTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.IOException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.base.ParserMinimalBase</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.base.ParserMinimalBase.ParserMinimalBase(int)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.io.IOContext.getSourceReference()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.util.ByteArrayBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._byteArrayBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._formatFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._ioContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._objectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createRootContext(int, int)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._binaryValue</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._byteArrayBuilder</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.util.ByteArrayBuilder</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._getByteArrayBuilder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._cfgNameForTextElement</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setXMLTextElementName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._closed</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isClosed()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._constructError(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currText</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currToken</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Base64Variant</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.util.ByteArrayBuilder</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.util.ByteArrayBuilder.toByteArray()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(java.lang.String, com.fasterxml.jackson.core.util.ByteArrayBuilder, com.fasterxml.jackson.core.Base64Variant)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._getByteArrayBuilder()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(java.lang.String, com.fasterxml.jackson.core.util.ByteArrayBuilder, com.fasterxml.jackson.core.Base64Variant)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._formatFeatures</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getFormatFeatures()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isEnabled(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideFormatFeatures(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._getByteArrayBuilder()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.util.ByteArrayBuilder</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.util.ByteArrayBuilder.ByteArrayBuilder()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.util.ByteArrayBuilder.reset()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._byteArrayBuilder</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonLocation</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParseException</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.io.IOContext.getSourceReference()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._ioContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._reportInvalidEOF(java.lang.String, com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getStartLocation(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.inArray()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.inRoot()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._ioContext</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._isEmpty(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._mayBeLeaf</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._namesToWrap</name>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextToken</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._objectCodec</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCodec()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getParsingContext()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._releaseBuffers()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._reportError(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._reportInvalidEOF(java.lang.String, com.fasterxml.jackson.core.JsonToken)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.$SwitchMap$com$fasterxml$jackson$core$JsonToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._namesToWrap</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildArrayContext(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getNamesToWrap()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getParent()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentName(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentLocation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getStaxReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTokenLocation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._namesToWrap</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setNamesToWrap(java.util.Set)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.contains(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(com.fasterxml.jackson.core.JsonParser)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser$Feature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser$Feature.AUTO_CLOSE_SOURCE</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.io.IOContext.isResourceManaged()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._closed</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._ioContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._releaseBuffers()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.closeCompletely()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._formatFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.setFormatFeatures(int)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._formatFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.setFormatFeatures(int)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBigIntegerValue()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Base64Variant</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParseException</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_STRING</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._binaryValue</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._constructError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._reportError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalArgumentException</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCodec()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._objectCodec</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentLocation()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonLocation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentLocation()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_ARRAY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getCurrentName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getParent()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentToken()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getDecimalValue()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getDoubleValue()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getEmbeddedObject()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getFloatValue()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getFormatFeatures()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._formatFeatures</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getIntValue()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getLongValue()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getNumberType()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser$NumberType</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getNumberValue()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Number</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getParsingContext()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonStreamContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getStaxReader()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getXmlReader()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.asString()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.$SwitchMap$com$fasterxml$jackson$core$JsonToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currText</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextCharacters()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextLength()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(java.io.Writer)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="feature" confirmed="no">java.io.Writer.write(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextCharacters()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextLength()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextOffset()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTokenLocation()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonLocation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getTokenLocation()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_STRING</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.asString()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.isScalarValue()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.$SwitchMap$com$fasterxml$jackson$core$JsonToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currText</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._namesToWrap</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getNamesToWrap()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getParent()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.hasTextCharacters()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isClosed()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._closed</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isEnabled(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._formatFeatures</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_ARRAY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_ARRAY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.convertToArray()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_ARRAY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.FIELD_NAME</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_STRING</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._binaryValue</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currText</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._mayBeLeaf</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._namesToWrap</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getNamesToWrap()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getParent()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.inArray()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentName(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getText()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_ARRAY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.FIELD_NAME</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_NULL</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_STRING</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.$SwitchMap$com$fasterxml$jackson$core$JsonToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._binaryValue</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._cfgNameForTextElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currText</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._isEmpty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._mayBeLeaf</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._namesToWrap</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildArrayContext(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getNamesToWrap()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getParent()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.inArray()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.inObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentName(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getText()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_ARRAY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currToken</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getParent()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideFormatFeatures(int, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._formatFeatures</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.requiresCustomCodec()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._objectCodec</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setXMLTextElementName(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._cfgNameForTextElement</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.version()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Version</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.VERSION</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.$SwitchMap$com$fasterxml$jackson$core$JsonToken</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_ARRAY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.FIELD_NAME</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_ARRAY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_STRING</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.ordinal()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.values()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.$SwitchMap$com$fasterxml$jackson$core$JsonToken</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchFieldError</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.FormatFeature</outbound>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatReadFeatureType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.configure(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isEnabled(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.$VALUES</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.EMPTY_ELEMENT_AS_NULL</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.FromXmlParser$Feature(java.lang.String, int, boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature._defaultState</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature._mask</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.ordinal()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature._defaultState</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.FromXmlParser$Feature(java.lang.String, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.enabledByDefault()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature._mask</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.FromXmlParser$Feature(java.lang.String, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.collectDefaults()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.enabledByDefault()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.values()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.enabledByDefault()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature._defaultState</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.collectDefaults()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.enabledIn(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature._mask</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.collectDefaults()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.enabledIn(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isEnabled(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.ordinal()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.FromXmlParser$Feature(java.lang.String, int, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.EMPTY_ELEMENT_AS_NULL</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.FromXmlParser$Feature(java.lang.String, int, boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.values()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.$VALUES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature[]</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature[].clone()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.collectDefaults()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.values()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature[].clone()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.Issue274PropertyNameTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.XML</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.newMapper()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.MapperFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.MapperFeature[])</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.newMapper()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject.event</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.EventId</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.getEventId()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.setEventId(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.Issue274PropertyNameTest$Event()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.getEventId()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.EventId</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.setEventId(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.EventId</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject.Issue274PropertyNameTest$RootObject()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject.event</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject.generated</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$1.NullConversionsGenericTest$1(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$2.NullConversionsGenericTest$2(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$2.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$3.NullConversionsGenericTest$3(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$3.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$4.NullConversionsGenericTest$4(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$4.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$5.NullConversionsGenericTest$5(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$5.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$6.NullConversionsGenericTest$6(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$6.this$0</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.EMPTY_XML</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.NullConversionsGenericTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.NullConversionsGenericTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.newMapper()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.newMapper()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.NullConversionsGenericTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</name>
                <outbound type="class" confirmed="no">D[]</outbound>
                <outbound type="class" confirmed="no">I[]</outbound>
                <outbound type="class" confirmed="no">Z[]</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, com.fasterxml.jackson.core.type.TypeReference)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$2.NullConversionsGenericTest$2(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$3.NullConversionsGenericTest$3(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$4.NullConversionsGenericTest$4(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$5.NullConversionsGenericTest$5(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$6.NullConversionsGenericTest$6(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.y</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$PointWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$PointWrapper.p</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, com.fasterxml.jackson.core.type.TypeReference)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.XmlTestBase$Point(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.y</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$1.NullConversionsGenericTest$1(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.NullConversionsGenericTest$GeneralEmpty(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.value</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.fail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.verifyException(java.lang.Throwable, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.verifyException(java.lang.Throwable, java.lang.String[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$1</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$1.NullConversionsGenericTest$1(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.type.TypeReference.TypeReference()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$1.this$0</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$1.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$1.NullConversionsGenericTest$1(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$2</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$2.NullConversionsGenericTest$2(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.type.TypeReference.TypeReference()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$2.this$0</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$2.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$2.NullConversionsGenericTest$2(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$3</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$3.NullConversionsGenericTest$3(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.type.TypeReference.TypeReference()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$3.this$0</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$3.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$3.NullConversionsGenericTest$3(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$4</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$4.NullConversionsGenericTest$4(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.type.TypeReference.TypeReference()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$4.this$0</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$4.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$4.NullConversionsGenericTest$4(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$5</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$5.NullConversionsGenericTest$5(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.type.TypeReference.TypeReference()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$5.this$0</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$5.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$5.NullConversionsGenericTest$5(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$6</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$6.NullConversionsGenericTest$6(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.type.TypeReference.TypeReference()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$6.this$0</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$6.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$6.NullConversionsGenericTest$6(com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.NullConversionsGenericTest$GeneralEmpty()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.NullConversionsGenericTest$GeneralEmpty(java.lang.Object)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.value</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.getValue()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.value</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.setValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSetter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.Nulls.AS_EMPTY</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.value</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.value</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.NullConversionsGenericTest$GeneralEmpty(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.getValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorPOJO</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorWrapper.value</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorPOJO.NullConversionsGenericTest$NoCtorPOJO(boolean)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorWrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorWrapper.NullConversionsGenericTest$NoCtorWrapper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorWrapper.value</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSetter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.Nulls.AS_EMPTY</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorPOJO</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$PointWrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$PointWrapper.NullConversionsGenericTest$PointWrapper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$PointWrapper.p</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSetter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.Nulls.AS_EMPTY</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.NullConversionsSkipTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.NullConversionsSkipTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.newMapper()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.assertNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.newMapper()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.NullConversionsSkipTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.noNulls</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.nullsOk</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.assertNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.noNulls</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.nullsOk</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._noNulls</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._nullsOk</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.assertNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._noNulls</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._nullsOk</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSetter$Value</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonSetter$Value.forValueNulls(com.fasterxml.jackson.annotation.Nulls)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.Nulls</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.Nulls.SKIP</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.configOverride(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.cfg.MutableConfigOverride</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.cfg.MutableConfigOverride.setSetterInfo(com.fasterxml.jackson.annotation.JsonSetter$Value)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.assertNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.newMapper()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.NullConversionsSkipTest$NullSkipField()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.noNulls</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.nullsOk</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.noNulls</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSetter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.Nulls.SKIP</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.NullConversionsSkipTest$NullSkipField()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.nullsOk</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.NullConversionsSkipTest$NullSkipField()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.NullConversionsSkipTest$NullSkipMethod()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._noNulls</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._nullsOk</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._noNulls</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.NullConversionsSkipTest$NullSkipMethod()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.setNoNulls(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._nullsOk</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.NullConversionsSkipTest$NullSkipMethod()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.setNullsOk(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.setNoNulls(java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSetter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.Nulls.SKIP</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._noNulls</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.setNullsOk(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._nullsOk</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.NullConversionsSkipTest$StringValue()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.setValue(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.value</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.value</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.NullConversionsSkipTest$StringValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.setValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.SimpleStringValuesTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.SimpleStringValuesTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.MAPPER</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Issue167Bean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Issue167Bean.d</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.text</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.text</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.text</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean[]</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.text</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writerWithDefaultPrettyPrinter()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.EmptyStringValueTest$Name(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.first</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.last</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names.EmptyStringValueTest$Names()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names.names</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.b</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.SimpleStringValuesTest$Bean2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.a</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.b</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.toString()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.b</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Issue167Bean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Issue167Bean.SimpleStringValuesTest$Issue167Bean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Issue167Bean.d</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.TestBinaryData()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.convertValue(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$Data</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$Data.bytes</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$TwoData</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$TwoData.data1</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$TwoData.data2</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(byte[], java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$Data</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$TwoData.data1</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$TwoData.data2</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$Data.TestBinaryData$Data()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$Data.bytes</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$TwoData</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$TwoData.TestBinaryData$TwoData()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$TwoData.data1</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$Data</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$TwoData.data2</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$Data</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.TestDeserialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMapWithAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.TestDeserialization()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.MAPPER</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMapWithAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean.text</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMapWithAttr()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.number</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.type</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.number</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.type</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.MALE</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser(java.lang.String, java.lang.String, boolean, com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender, byte[])</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean.TestDeserialization$AttributeBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean.text</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean.text</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean.TestDeserialization$AttributeBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.TestDeserialization$Optional()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.number</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.type</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.number</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.TestDeserialization$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.type</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.TestDeserialization$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.TestEnums()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums.TestEnums()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.MAPPER</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean.TestEnums$EnumBean(com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean.value</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.B</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean.TestEnums$EnumBean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean.TestEnums$EnumBean(com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean.value</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean.value</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean.TestEnums$EnumBean(com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean.TestEnums$EnumBean(com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.$VALUES</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.A</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.B</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.C</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.TestEnums$TestEnum(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.A</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.B</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.C</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.TestEnums$TestEnum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.values()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.$VALUES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum[]</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum[].clone()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.values()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum[].clone()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.TestViews$Issue44Bean(com.fasterxml.jackson.dataformat.xml.deser.TestViews)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.this$0</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews.TestViews()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews._xmlMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testNullSuppression()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testNullSuppression()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews.setUp()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.setUp()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews._xmlMapper</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.FilterProvider</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.serializeAllExcept(java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.SimpleFilterProvider()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider.addFilter(java.lang.String, com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writer(com.fasterxml.jackson.databind.ser.FilterProvider)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.TestViews$Issue44Bean(com.fasterxml.jackson.dataformat.xml.deser.TestViews)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestViews.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.MapperFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.MapperFeature, boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.writerWithView(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar.TestViews$Bar()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar.restrictedBarProperty</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.TestViews$Foo()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.bars</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.restrictedFooProperty</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$RestrictedView</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestViews.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestViews.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestViews.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews.testNullSuppression()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.TestViews$NonNullBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.TestViews.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.bars</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar.TestViews$Bar()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar.restrictedBarProperty</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonView</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$RestrictedView</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.TestViews$Foo()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.bars</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonView</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$RestrictedView</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.restrictedFooProperty</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonView</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$RestrictedView</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonFilter</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.TestViews$Issue44Bean(com.fasterxml.jackson.dataformat.xml.deser.TestViews)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.first</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.second</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.this$0</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.first</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.TestViews$Issue44Bean(com.fasterxml.jackson.dataformat.xml.deser.TestViews)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.second</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.TestViews$Issue44Bean(com.fasterxml.jackson.dataformat.xml.deser.TestViews)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.TestViews$Issue44Bean(com.fasterxml.jackson.dataformat.xml.deser.TestViews)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonInclude</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonInclude$Include.NON_NULL</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.TestViews$NonNullBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.nullName</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testNullSuppression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.TestViews$NonNullBean()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.nullName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.TestViews$NonNullBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$RestrictedView</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar.restrictedBarProperty</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.bars</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.restrictedFooProperty</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.TestViews$RestrictedView.TestViews$RestrictedView()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getValueType()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer.DelegatingDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._namesToWrap</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._type</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(com.fasterxml.jackson.core.JsonParser)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._namesToWrap</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._delegatee</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._namesToWrap</name>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(com.fasterxml.jackson.core.JsonParser)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._type</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.BeanProperty</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext.constructType(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JavaType)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer.handledType()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.NO_NAME</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase.properties()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty.getName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty.getType()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty.getWrapperName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._delegatee</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._type</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(com.fasterxml.jackson.databind.JavaType)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._delegatee</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._delegatee</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeDeserializer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._delegatee</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.newDelegatingInstance(com.fasterxml.jackson.databind.JsonDeserializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerModifier</outbound>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.XmlBeanDeserializerModifier(java.lang.String)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerModifier.BeanDeserializerModifier()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._cfgNameForTextValue</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._cfgNameForTextValue</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.XmlBeanDeserializerModifier(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationConfig</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.DeserializationConfig.getAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.getSimpleName()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty.getFullName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty.getMember()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotatedMember</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._cfgNameForTextValue</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.BeanDescription</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationConfig</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getValueInstantiator()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase.properties()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.ValueInstantiator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.ValueInstantiator.canCreateFromString()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.BeanDescription</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationConfig</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.DeserializationConfig.getAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.NO_NAME</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.getSimpleName()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotatedMember</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getPrimaryMember()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getWrapperName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.withSimpleName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._cfgNameForTextValue</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(java.util.Collection)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.set(int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonStreamContext</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getParsingContext()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonStreamContext.JsonStreamContext()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._child</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._columnNr</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._index</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._lineNr</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._parent</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._type</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildArrayContext(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createRootContext()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createRootContext(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._child</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildArrayContext(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._columnNr</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getStartLocation(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.hasCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentValue</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getCurrentValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentValue(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._index</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._lineNr</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getStartLocation(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._namesToWrap</name>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getNamesToWrap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setNamesToWrap(java.util.Set)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._parent</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getParent()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._type</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.convertToArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._wrappedName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.convertToArray()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._type</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildArrayContext(int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._child</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._child</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createRootContext()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createRootContext(int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.XmlReadContext(com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext, int, int, int)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.expectComma()</name>
                <outbound type="feature" confirmed="no">java.lang.UnsupportedOperationException.UnsupportedOperationException()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getCurrentIndex()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getCurrentName()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentName</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getCurrentValue()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentValue</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getNamesToWrap()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._namesToWrap</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getParent()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonStreamContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._parent</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getStartLocation(java.lang.Object)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonLocation</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonLocation.JsonLocation(java.lang.Object, long, int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._columnNr</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._lineNr</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.hasCurrentName()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentName</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.inArray()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.inObject()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.inRoot()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._columnNr</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentValue</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._index</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._lineNr</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._namesToWrap</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._type</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildArrayContext(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentName(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentName</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentValue(java.lang.Object)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentValue</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setNamesToWrap(java.util.Set)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._namesToWrap</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.io.CharTypes.appendQuoted(java.lang.StringBuilder, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._type</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getCurrentIndex()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.XmlStringDeserializer()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.StdScalarDeserializer(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer._deserializeFromArray(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer._valueClass</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</name>
                <outbound type="class" confirmed="no">B[]</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Base64Variant</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.Base64Variant.encode(byte[], boolean)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getCurrentToken()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getText()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getValueAsString(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.hasToken(com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonProcessingException</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_ARRAY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_NULL</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_STRING</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext.getBase64Variant()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class, com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer._deserializeFromArray(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer._valueClass</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeDeserializer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.isCachable()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getValueInstantiator()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty.getPropertyIndex()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.ValueInstantiator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer.DelegatingDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._valueInstantiator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextPropertyIndex</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase.findProperty(int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getValueInstantiator()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.ValueInstantiator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer.DelegatingDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._valueInstantiator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextPropertyIndex</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._delegatee</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._valueInstantiator</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.ValueInstantiator</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextProperty</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextPropertyIndex</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.SettableBeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.BeanProperty</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.BeanDeserializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.XmlTextDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._delegatee</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextPropertyIndex</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getCurrentToken()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_STRING</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserializeAndSet(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.ValueInstantiator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.ValueInstantiator.createUsingDefault(com.fasterxml.jackson.databind.DeserializationContext)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._delegatee</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._valueInstantiator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextProperty</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getCurrentToken()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_STRING</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserializeAndSet(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._delegatee</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextProperty</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeDeserializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._delegatee</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.newDelegatingInstance(com.fasterxml.jackson.databind.JsonDeserializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentLocation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getStaxReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTokenLocation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.REPLAY_END</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.REPLAY_START_DELAYED</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.REPLAY_START_DUP</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_ATTRIBUTE_NAME</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_ATTRIBUTE_VALUE</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_END</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_END_ELEMENT</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_START_ELEMENT</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_TEXT</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._formatFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextAttributeIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._sourceReference</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamReader.getEventType()</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getAttributeCount()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getLocalName()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getNamespaceURI()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.ri.Stax2ReaderAdapter.wrapIfNecessary(javax.xml.stream.XMLStreamReader)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._allWs(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._attributeCount</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.hasAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.EMPTY_ELEMENT_AS_NULL</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.enabledIn(int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._formatFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(org.codehaus.stax2.XMLStreamReader2)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.isEmptyElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.next()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.hasAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentWrapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(org.codehaus.stax2.XMLStreamLocation2)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonLocation</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonLocation.JsonLocation(java.lang.Object, long, int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._sourceReference</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamLocation2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamLocation2.getCharacterOffset()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamLocation2.getColumnNumber()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamLocation2.getLineNumber()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentLocation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getTokenLocation()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._formatFeatures</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.setFormatFeatures(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(org.codehaus.stax2.XMLStreamReader2)</name>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.getCause()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getText()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getParent()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperLocalName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperNamespace()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.isMatching()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._repeatElement</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getParent()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.intermediateWrapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextLocalName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextNamespaceURI</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._repeatElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getLocalName()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getNamespaceURI()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getParent()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperLocalName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperNamespace()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.intermediateWrapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextAttributeIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextLocalName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextNamespaceURI</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._repeatElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getAttributeCount()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getLocalName()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getNamespaceURI()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._mixedText</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getNamespaceURI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._allWs(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._mixedText</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextAttributeIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._skipUntilTag()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._textValue</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getAttributeLocalName(int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getAttributeNamespace(int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getAttributeValue(int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getEventType()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextAttributeIndex</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextLocalName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextNamespaceURI</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._repeatElement</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._skipUntilTag()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.hasNext()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.next()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._sourceReference</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(org.codehaus.stax2.XMLStreamLocation2)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._textValue</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</name>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._skipUntilTag()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.close()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.closeCompletely()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentLocation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getTokenLocation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getXmlReader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.close()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.close()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.closeCompletely()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.closeCompletely()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getParent()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextAttributeIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._textValue</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getEventType()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getLocalName()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getNamespaceURI()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentLocation()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonLocation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(org.codehaus.stax2.XMLStreamLocation2)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.LocationInfo</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.LocationInfo.getCurrentLocation()</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamLocation2</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getLocationInfo()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentLocation()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentToken()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getNamespaceURI()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getText()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._textValue</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getTokenLocation()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonLocation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(org.codehaus.stax2.XMLStreamLocation2)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.LocationInfo</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.LocationInfo.getStartLocation()</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamLocation2</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamReader2.getLocationInfo()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTokenLocation()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getXmlReader()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamReader2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getStaxReader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.hasAttributes()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._repeatElement</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getParent()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchingWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._repeatElement</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.setFormatFeatures(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._formatFeatures</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.IOException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextAttributeIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextLocalName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._repeatElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._textValue</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.XmlTokenStreamTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._staxInputFactory</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.newInstance()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._staxInputFactory</name>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.XmlTokenStreamTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.EMPTY_ELEMENT_AS_NULL</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.collectDefaults()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentToken()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getText()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._staxInputFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.io.StringReader.StringReader(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.Reader)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamReader.nextTag()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testEmptyTags()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.EMPTY_ELEMENT_AS_NULL</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.collectDefaults()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentToken()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getText()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._staxInputFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.io.StringReader.StringReader(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.Reader)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamReader.nextTag()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testRootAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testEmptyTags()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.collectDefaults()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentToken()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getText()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._staxInputFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.io.StringReader.StringReader(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.Reader)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamReader.nextTag()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testRootAttributes()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.collectDefaults()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentToken()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getText()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._staxInputFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.io.StringReader.StringReader(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.Reader)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamReader.nextTag()</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.deser.builder</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.BuilderSimpleTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.newMapper()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.BuilderSimpleTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testCustomWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testImmutable()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testCustomWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testImmutable()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertSame(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.newMapper()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.BuilderSimpleTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface.getX()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2.getX()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testCustomWith()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo.value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testImmutable()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable.value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.b</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.c</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.Module</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.registerModule(com.fasterxml.jackson.databind.Module)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.BuilderSimpleTest$NopModule1557()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo.value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY._x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY._y</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertSame(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value.forIgnoreUnknown(boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.configOverride(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.cfg.MutableConfigOverride</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.cfg.MutableConfigOverride.setIgnorals(com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.getPropertyName()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY._x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY._y</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.assertSame(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.fail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.newMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.verifyException(java.lang.Throwable, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.verifyException(java.lang.Throwable, java.lang.String[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonIgnoreProperties</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.BuilderSimpleTest$BuildABC()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.a</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.build()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.assignB(int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.b</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.b</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.assignB(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.build()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.build()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.b</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.c</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.BuilderSimpleTest$ValueClassABC(int, int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.c</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.build()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.c(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.c(int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSetter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.c</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo.BuilderSimpleTest$BuildFoo()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo.construct()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo.value</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo.BuilderSimpleTest$ValueFoo(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo.fooValue(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo.value</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo.construct()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo.fooValue(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.BuilderSimpleTest$BuildImmutable()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.BuilderSimpleTest$BuildImmutable(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.BuilderSimpleTest$BuildImmutable(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.BuilderSimpleTest$BuildImmutable()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.withValue(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.build()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.value</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable.BuilderSimpleTest$ValueImmutable(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.value</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.BuilderSimpleTest$BuildImmutable(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.build()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.withValue(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.BuilderSimpleTest$BuildImmutable(int)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.Module</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.BuilderSimpleTest$NopModule1557$1(com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.BuilderSimpleTest$NopModule1557()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.Module.Module()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.getModuleName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.Module$SetupContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.Module$SetupContext.insertAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.BuilderSimpleTest$NopModule1557$1(com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.version()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Version</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.Version.unknownVersion()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.BuilderSimpleTest$NopModule1557$1(com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector.NopAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.this$0</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.BuilderSimpleTest$NopModule1557$1(com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557$1.version()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Version</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.Version.unknownVersion()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.annotation.JsonDeserialize</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777.BuilderSimpleTest$SelfBuilder777()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777.withX(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777.x</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777.x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777.withX(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.BuilderSimpleTest$SimpleBuilderXY()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.build()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.y</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY.BuilderSimpleTest$ValueClassXY(int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.withX(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.x</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.withY(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.y</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.build()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.withX(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.y</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.build()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.withY(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.annotation.JsonDeserialize</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.build()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.BuilderSimpleTest$ValueClassABC(int, int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.b</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.c</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.build()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.a</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.BuilderSimpleTest$ValueClassABC(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.b</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.BuilderSimpleTest$ValueClassABC(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.c</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.BuilderSimpleTest$ValueClassABC(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.annotation.JsonDeserialize</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.build()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY.BuilderSimpleTest$ValueClassXY(int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY._x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY._y</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.build()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY._x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY.BuilderSimpleTest$ValueClassXY(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY._y</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY.BuilderSimpleTest$ValueClassXY(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.annotation.JsonDeserialize</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo.construct()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testCustomWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo.BuilderSimpleTest$ValueFoo(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo.construct()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo.value</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo.BuilderSimpleTest$ValueFoo(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testCustomWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.annotation.JsonDeserialize</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.build()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testImmutable()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable.BuilderSimpleTest$ValueImmutable(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.build()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable.value</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable.BuilderSimpleTest$ValueImmutable(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testImmutable()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.annotation.JsonDeserialize</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder.build()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface.getX()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.annotation.JsonDeserialize</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2.getX()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder.BuilderSimpleTest$ValueInterface2Builder()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder.build()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder.x</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl.BuilderSimpleTest$ValueInterface2Impl(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder.withX(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder.x</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder.x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder.build()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder.withX(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder.build()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl.BuilderSimpleTest$ValueInterface2Impl(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl._x</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder.build()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl._x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl.BuilderSimpleTest$ValueInterface2Impl(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl.getX()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl.getX()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl._x</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder.BuilderSimpleTest$ValueInterfaceBuilder()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder.build()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl.BuilderSimpleTest$ValueInterfaceImpl(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder.withX(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder.x</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder.x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder.build()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder.withX(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl.BuilderSimpleTest$ValueInterfaceImpl(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl._x</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder.build()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl._x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl.BuilderSimpleTest$ValueInterfaceImpl(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl.getX()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl.getX()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl._x</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.failing</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.CaseInsensitiveDeser273Test()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.MapperFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.databind.MapperFeature[])</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.INSENSITIVE_MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.newMapper()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.INSENSITIVE_MAPPER</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.CaseInsensitiveDeser273Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.testCaseInsensitiveComplex()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.testCaseInsensitiveComplex()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.newMapper()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.CaseInsensitiveDeser273Test()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.testCaseInsensitiveComplex()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.INSENSITIVE_MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonIgnoreProperties</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.CaseInsensitiveDeser273Test$Depot273()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.name</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.setName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.number</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.setNumber(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.setName(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.name</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.setNumber(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.number</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.testCaseInsensitiveComplex()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.CaseInsensitiveDeser273Test$Depots273()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.command</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.element</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.setElement(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.setElement(java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.element</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.taskId</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.EmptyListDeser124Test()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test$TestList</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test$TestList.EmptyListDeser124Test$TestList()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test$TestList.list</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test$TestList</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test$TestList.EmptyListDeser124Test$TestList()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test$TestList.list</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.EnumIssue9Test()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.EnumIssue9Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.B</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.B</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.EnumIssue9Test$UntypedEnumBean(com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.value</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.EnumIssue9Test$UntypedEnumBean(com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.$VALUES</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.A</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.B</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.C</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.EnumIssue9Test$TestEnum(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.A</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.B</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.C</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.EnumIssue9Test$TestEnum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.values()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.$VALUES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum[]</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum[].clone()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.values()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum[].clone()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.EnumIssue9Test$UntypedEnumBean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.EnumIssue9Test$UntypedEnumBean(com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.value</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.value</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.PROPERTY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.CLASS</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.EnumIssue9Test$UntypedEnumBean(com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.FailingDelegatingCreator254Test()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.FailingDelegatingCreator254Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Foo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Foo.bar</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Foo.bar</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar.FailingDelegatingCreator254Test$Bar(int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonCreator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonCreator$Mode.DELEGATING</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar.value</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar.value</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar.FailingDelegatingCreator254Test$Bar(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Foo</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Foo.FailingDelegatingCreator254Test$Foo()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Foo.bar</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.Issue37AdapterTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.needEncodingMapData</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.simpleMapData</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.singletonMap(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._jaxbMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._nonJaxbMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.needEncodingMapData</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.Issue37AdapterTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.JacksonAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.setUp()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._jaxbMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._nonJaxbMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.simpleMapData</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.Issue37AdapterTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.singletonMap(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.Issue37AdapterTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.Issue37AdapterTest$DocWithMapData()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.mapDatas</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._jaxbMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.needEncodingMapData</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.Issue37AdapterTest$DocWithMapDataSimpleAnnotation()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.mapDatas</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._jaxbMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.needEncodingMapData</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.Issue37AdapterTest$DocWithMapDataSimpleAnnotation()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.mapDatas</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._nonJaxbMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.needEncodingMapData</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.Issue37AdapterTest$DocWithMapData()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.mapDatas</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._nonJaxbMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.needEncodingMapData</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.Issue37AdapterTest$DocWithMapData()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.mapDatas</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._jaxbMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.simpleMapData</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.Issue37AdapterTest$DocWithMapDataSimpleAnnotation()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.mapDatas</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest._jaxbMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.simpleMapData</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlRootElement</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.Issue37AdapterTest$DocWithMapData()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.mapDatas</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlRootElement</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.Issue37AdapterTest$DocWithMapDataSimpleAnnotation()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.mapDatas</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(java.lang.Object)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.Issue37AdapterTest$MapData()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.Issue37AdapterTest$MapData(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.key</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.key</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.Issue37AdapterTest$MapData(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.value</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.Issue37AdapterTest$MapData(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(java.lang.Object)</inbound>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter</name>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.adapters.XmlAdapter</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.mapDatas</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.mapDatas</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.ENCODING</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.Issue37AdapterTest$URLEncoderMapDataAdapter()</name>
                <outbound type="feature" confirmed="no">javax.xml.bind.annotation.adapters.XmlAdapter.XmlAdapter()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.decodeKey(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.UnsupportedEncodingException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.net.URLDecoder.decode(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.encodeKey(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.UnsupportedEncodingException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.net.URLEncoder.encode(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.lang.Object)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.Issue37AdapterTest$MapData(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.encodeKey(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">java.util.Map$Entry</outbound>
                <outbound type="feature" confirmed="no">java.util.Map$Entry.getKey()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map$Entry.getValue()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.entrySet()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.key</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.decodeKey(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(java.lang.Object)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[]</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.ListDeser294Test()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.newMapper()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.ListDeser294Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test._newSublevel(java.lang.Integer, java.lang.String)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel.ListDeser294Test$Sublevel()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel.id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel.sublevel</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.newMapper()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.ListDeser294Test()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writerWithDefaultPrettyPrinter()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.ListDeser294Test$RootLevel()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.sublevels</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel.sublevel</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.MAPPER</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test._newSublevel(java.lang.Integer, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.ListDeser294Test$RootLevel()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.sublevels</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.sublevels</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.ListDeser294Test$RootLevel()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test._newSublevel(java.lang.Integer, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel.ListDeser294Test$Sublevel()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test._newSublevel(java.lang.Integer, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel.id</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test._newSublevel(java.lang.Integer, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel.sublevel</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test._newSublevel(java.lang.Integer, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.MixedContentTreeRead226Test()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.testMixed226()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.testMixed226()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonNode</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readTree(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.PolymorphicIssue4Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.PolymorphicIssue4Test()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.newMapper()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.newMapper()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.PolymorphicIssue4Test()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.PolymorphicIssue4Test$SubTypeWithClassArray(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.PolymorphicIssue4Test$ClassArrayWrapper(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.wrapped</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.WRAPPER_ARRAY</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.CLASS</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.PolymorphicIssue4Test$ClassArrayWrapper(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.wrapped</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray.PolymorphicIssue4Test$BaseTypeWithClassArray()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.PolymorphicIssue4Test$SubTypeWithClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.PolymorphicIssue4Test$SubTypeWithClassArray(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassObject</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.WRAPPER_OBJECT</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.CLASS</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassObject</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassObject.PolymorphicIssue4Test$BaseTypeWithClassObject()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassObject.PolymorphicIssue4Test$SubTypeWithClassObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassObject.PolymorphicIssue4Test$SubTypeWithClassObject(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.PolymorphicIssue4Test$ClassArrayWrapper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.PolymorphicIssue4Test$ClassArrayWrapper(java.lang.String)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.wrapped</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.PolymorphicIssue4Test$SubTypeWithClassArray(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.wrapped</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.PolymorphicIssue4Test$ClassArrayWrapper(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.PolymorphicIssue4Test$SubTypeWithClassArray()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray.PolymorphicIssue4Test$BaseTypeWithClassArray()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.PolymorphicIssue4Test$SubTypeWithClassArray(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray.PolymorphicIssue4Test$BaseTypeWithClassArray()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.name</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.PolymorphicIssue4Test$ClassArrayWrapper(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.PolymorphicIssue4Test$SubTypeWithClassArray(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassObject</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassObject</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassObject.PolymorphicIssue4Test$SubTypeWithClassObject()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassObject.PolymorphicIssue4Test$BaseTypeWithClassObject()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassObject.PolymorphicIssue4Test$SubTypeWithClassObject(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassObject.PolymorphicIssue4Test$BaseTypeWithClassObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassObject.name</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassObject.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassObject.PolymorphicIssue4Test$SubTypeWithClassObject(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.PolymorphicList97Test()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.registerSubtypes(java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooBad</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.hamcrest.CoreMatchers.instanceOf(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="no">org.junit.Assert.assertThat(java.lang.Object, org.hamcrest.Matcher)</outbound>
                <outbound type="class" confirmed="no">org.junit.Test</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.registerSubtypes(java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooGood</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.hamcrest.CoreMatchers.instanceOf(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="no">org.junit.Assert.assertThat(java.lang.Object, org.hamcrest.Matcher)</outbound>
                <outbound type="class" confirmed="no">org.junit.Test</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.NAME</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooBad</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooGood</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo.PolymorphicList97Test$Foo()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooBad.PolymorphicList97Test$FooBad()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooGood.PolymorphicList97Test$FooGood()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo.data</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooBad</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeName</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooBad.PolymorphicList97Test$FooBad()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo.PolymorphicList97Test$Foo()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooBad.bar</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooGood</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeName</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooGood.PolymorphicList97Test$FooGood()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo.PolymorphicList97Test$Foo()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooGood.bar</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.TestConflictingGetters()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.TestConflictingGetters$Bean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.setBeanInfo(com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo[])</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.setBeanOther(com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo[])</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo.TestConflictingGetters$BeanInfo(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.TestConflictingGetters$Bean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.beanInfo</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.getBeanInfo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.setBeanInfo(com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.beanOther</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.getBeanOther()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.setBeanOther(com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.getBeanInfo()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.beanInfo</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.getBeanOther()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.beanOther</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.setBeanInfo(com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo[])</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.beanInfo</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.setBeanOther(com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo[])</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.beanOther</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.beanInfo</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.beanOther</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.getBeanInfo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.getBeanOther()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.setBeanInfo(com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.setBeanOther(com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo.TestConflictingGetters$BeanInfo()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo.TestConflictingGetters$BeanInfo(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo.name</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo.TestConflictingGetters$BeanInfo(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.TestDeserialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.TestDeserialization()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.MAPPER</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.b</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.TestDeserialization$EmptyStrings()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.b</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.a</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.TestDeserialization$EmptyStrings()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.b</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.TestDeserialization$EmptyStrings()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.TestEmptyContent()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.assertNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.testNoContent()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.testNoContent()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent$EmptyBean</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.assertNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent$EmptyBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.testNoContent()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent$EmptyBean.TestEmptyContent$EmptyBean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.TestUntypedListSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.testListAsObject()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.TestUntypedListSerialization()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.MAPPER</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.testListAsObject()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.testListAsObject()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean.TestUntypedListSerialization$TypedListBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean.TestUntypedListSerialization$UntypedListBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean.TestUntypedListSerialization$TypedListBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean.list</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.testListAsObject()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean.list</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean.TestUntypedListSerialization$TypedListBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean.TestUntypedListSerialization$UntypedListBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean.list</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.testListAsObject()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean.list</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean.TestUntypedListSerialization$UntypedListBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.TestUnwrappedDeserIssue86()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonInclude$Include</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonInclude$Include.NON_NULL</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude$Include)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.TestUnwrappedDeserIssue86$Issue86(java.lang.String, java.util.List)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.TestUnwrappedDeserIssue86$Issue86()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.TestUnwrappedDeserIssue86$Issue86(java.lang.String, java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.children</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.id</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.children</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.TestUnwrappedDeserIssue86$Issue86(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.equals(java.lang.Object)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.children</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.id</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.equals(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.id</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.TestUnwrappedDeserIssue86$Issue86(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.equals(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.TypeAttributeOrder242Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.TypeAttributeOrder242Test()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.MAPPER</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Attr</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Attr.param</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$B</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$B.attr</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.assertEquals(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSubTypes</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSubTypes$Type</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.PROPERTY</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.NAME</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$B</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$B</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A.TypeAttributeOrder242Test$A()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$B.TypeAttributeOrder242Test$B()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A.id</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Attr</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$B.attr</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Attr.TypeAttributeOrder242Test$Attr()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Attr.param</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$B</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$B.TypeAttributeOrder242Test$B()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A.TypeAttributeOrder242Test$A()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$B.attr</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Attr</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Param</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Param.TypeAttributeOrder242Test$Param()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Param.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.incr</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.IncrementalWritingTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.xmlMapper(boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.IncrementalWritingTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLOutputFactory()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(javax.xml.stream.XMLStreamWriter, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.XmlTestBase$NameBean(int, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLOutputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(java.io.Writer)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamWriter.close()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamWriter.writeEndDocument()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamWriter.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamWriter.writeStartElement(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.xmlMapper(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.IncrementalWritingTest()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.PartialReadTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.PartialReadTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.xmlMapper(boolean)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLInputFactory()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.io.StringReader.StringReader(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLInputFactory</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.Reader)</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamReader.close()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamReader.getEventType()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamReader.getLocalName()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamReader.next()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.xmlMapper(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.PartialReadTest()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.jaxb</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.AttributesWithJAXBTest$Jurisdiction(com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.this$0</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.AttributesWithJAXBTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.AttributesWithJAXBTest$Problem(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.JaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.AttributesWithJAXBTest$Jurisdiction(com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.JaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="feature" confirmed="no">javax.xml.bind.annotation.XmlAccessType.FIELD</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlAccessorType</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.AttributesWithJAXBTest$Jurisdiction(com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlAttribute</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.AttributesWithJAXBTest$Jurisdiction(com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.AttributesWithJAXBTest$Jurisdiction(com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.value</name>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlAttribute</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.AttributesWithJAXBTest$Jurisdiction(com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlRootElement</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.AttributesWithJAXBTest$Problem()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.AttributesWithJAXBTest$Problem(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.description</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.id</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.description</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.AttributesWithJAXBTest$Problem(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.id</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlAttribute</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.AttributesWithJAXBTest$Problem(java.lang.String, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.BuilderWithJAXB291Test()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.newMapper()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.JacksonAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.getTypeFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getCity()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.newMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.build()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder, com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$1)</inbound>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.annotation.JsonDeserialize</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.build()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.address1</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.city</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.country</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.county</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.postalCode</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.stateProvince</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.address1</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.city</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.country</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.county</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.postalCode</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.stateProvince</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder, com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$1)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder, com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$1)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$1</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.build()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.address1</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getAddress1()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.city</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getCity()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.country</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getCountry()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.county</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getCounty()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getAddress1()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.address1</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getCity()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.city</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getCountry()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.country</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getCounty()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.county</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getPostalCode()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.postalCode</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getStateProvince()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.stateProvince</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.postalCode</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getPostalCode()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.stateProvince</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getStateProvince()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder, com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$1)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.BuilderWithJAXB291Test$Address$AddressBuilder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonCreator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.address1</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.city</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.country</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.postalCode</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.stateProvince</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.address1</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.BuilderWithJAXB291Test$Address$AddressBuilder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.build()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$1</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder, com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$1)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.city</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.BuilderWithJAXB291Test$Address$AddressBuilder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.country</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.BuilderWithJAXB291Test$Address$AddressBuilder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.county</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.setCounty(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.postalCode</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.BuilderWithJAXB291Test$Address$AddressBuilder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.setCounty(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.county</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.stateProvince</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.BuilderWithJAXB291Test$Address$AddressBuilder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.ElementWrapperTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.JacksonAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writer()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.ElementWrapperTest$MyPerson()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.children</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.name</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.ElementWrapperTest$MyPerson2()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.child</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.name</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlRootElement</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.ElementWrapperTest$MyPerson()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.children</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.children</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElementWrapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.ElementWrapperTest$MyPerson()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlRootElement</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.ElementWrapperTest$MyPerson2()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.child</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.child</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.ElementWrapperTest$MyPerson2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.JAXBObjectId170Test()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.JacksonAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.getTypeFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.employees</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.location</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.computer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.setDefaultUseWrapper(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.JAXBObjectId170Test$Company()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.computers</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.employees</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.add(com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.computers</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.computers</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElementWrapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.JAXBObjectId170Test$Company()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.add(com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.employees</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElementWrapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.JAXBObjectId170Test$Company()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonIdentityInfo</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSubTypes</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSubTypes$Type</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.WRAPPER_OBJECT</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.NAME</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.ObjectIdGenerators$PropertyGenerator</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$LaptopComputer</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.add(com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.computer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$LaptopComputer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer.JAXBObjectId170Test$Computer()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.JAXBObjectId170Test$DesktopComputer()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$LaptopComputer.JAXBObjectId170Test$LaptopComputer()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer.id</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.JAXBObjectId170Test$DesktopComputer()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer.JAXBObjectId170Test$Computer()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.id</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.with(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.location</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.with(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.with(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.location</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="feature" confirmed="no">javax.xml.bind.annotation.XmlAccessType.FIELD</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlAccessorType</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlType</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.JAXBObjectId170Test$Employee()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.computer</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlIDREF</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.id</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlAttribute</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlID</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlAttribute</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$LaptopComputer</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$LaptopComputer.JAXBObjectId170Test$LaptopComputer()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer.JAXBObjectId170Test$Computer()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$LaptopComputer.vendor</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.WithJAXBAnnotationsTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._jaxbMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testRootName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testSerializeAsAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._nonJaxbMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testRootName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testSerializeAsAttr()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testRootName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testSerializeAsAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.JacksonAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.setUp()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._jaxbMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._nonJaxbMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.WithJAXBAnnotationsTest$WithXmlValue()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.text</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._jaxbMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.WithJAXBAnnotationsTest$MyPerson()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.firstName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.lastName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._jaxbMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testRootName()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$RootBean.WithJAXBAnnotationsTest$RootBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._jaxbMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._nonJaxbMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testSerializeAsAttr()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$AttrBean.WithJAXBAnnotationsTest$AttrBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._jaxbMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest._nonJaxbMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$AttrBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$AttrBean.WithJAXBAnnotationsTest$AttrBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$AttrBean.attr</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testSerializeAsAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$AttrBean.attr</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlAttribute</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$AttrBean.WithJAXBAnnotationsTest$AttrBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlRootElement</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.WithJAXBAnnotationsTest$MyPerson()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.firstName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.getFirstName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.setFirstName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.getFirstName()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.firstName</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.getId()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.id</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.getLastName()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.lastName</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.id</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlAttribute</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.getId()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.setId(java.lang.Long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.lastName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.getLastName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.setLastName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.setFirstName(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.firstName</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.setId(java.lang.Long)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.id</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.setLastName(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.lastName</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$RootBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlRootElement</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$RootBean.WithJAXBAnnotationsTest$RootBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$RootBean.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testRootName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$RootBean.value</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$RootBean.WithJAXBAnnotationsTest$RootBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlRootElement</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.WithJAXBAnnotationsTest$WithXmlValue()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.text</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.a</name>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlAttribute</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.WithJAXBAnnotationsTest$WithXmlValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.text</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlValue</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.WithJAXBAnnotationsTest$WithXmlValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.JaxbAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="no">java.lang.Deprecated</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.JaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.setDefaultUseWrapper(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.lists</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.DeserializePolyList178Test()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.DeserializePolyList178Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writerWithDefaultPrettyPrinter()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.DeserializePolyList178Test$Company()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.add(com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.computers</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.DeserializePolyList178Test$DesktopComputer()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.location</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.with(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.DeserializePolyList178Test$Company()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.computers</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.add(com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.computers</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.computers</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.DeserializePolyList178Test$Company()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.add(com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSubTypes</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSubTypes$Type</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.WRAPPER_OBJECT</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.NAME</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$LaptopComputer</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.add(com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$LaptopComputer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer.DeserializePolyList178Test$Computer()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.DeserializePolyList178Test$DesktopComputer()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$LaptopComputer.DeserializePolyList178Test$LaptopComputer()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer.id</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeName</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.DeserializePolyList178Test$DesktopComputer()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer.DeserializePolyList178Test$Computer()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.id</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.with(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.location</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.with(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.with(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.location</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$LaptopComputer</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeName</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$LaptopComputer.DeserializePolyList178Test$LaptopComputer()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer.DeserializePolyList178Test$Computer()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$LaptopComputer.vendor</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.EmptyListDeserTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.EmptyListDeserTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config.entry</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config.id</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Entry</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Entry.id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config.EmptyListDeserTest$Config()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config.entry</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config.id</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Entry</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Entry.EmptyListDeserTest$Entry()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Entry.id</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.Issue101UnwrappedListAttributesTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.Issue101UnwrappedListAttributesTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.number</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.type</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optionals</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optionals.optional</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root.Issue101UnwrappedListAttributesTest$Root()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root.unwrapped</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.Issue101UnwrappedListAttributesTest$UnwrappedElement(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.Issue101UnwrappedListAttributesTest$Optional()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.number</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.type</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.number</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.Issue101UnwrappedListAttributesTest$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.type</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.Issue101UnwrappedListAttributesTest$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optionals</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optionals.Issue101UnwrappedListAttributesTest$Optionals()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optionals.optional</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root.Issue101UnwrappedListAttributesTest$Root()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root.unwrapped</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.Issue101UnwrappedListAttributesTest$UnwrappedElement()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.Issue101UnwrappedListAttributesTest$UnwrappedElement(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.type</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.id</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.Issue101UnwrappedListAttributesTest$UnwrappedElement(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.type</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.Issue101UnwrappedListAttributesTest$UnwrappedElement(java.lang.String, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.ListAnnotationSharingTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.ListAnnotationSharingTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point.ListAnnotationSharingTest$Point(int, int)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.ListAnnotationSharingTest$Wrapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.points</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point.ListAnnotationSharingTest$Point()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point.ListAnnotationSharingTest$Point(int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point.y</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point.x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point.ListAnnotationSharingTest$Point(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point.y</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point.ListAnnotationSharingTest$Point(int, int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.ListAnnotationSharingTest$Wrapper()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.points</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.getPoints()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.points</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.points</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.ListAnnotationSharingTest$Wrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.getPoints()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.ListAsObjectTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.assertEquals(float, float, float)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.getV()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.getType()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.getValues()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.assertEquals(float, float, float)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.ListAsObjectTest$Value()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.getV()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.v</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.setV(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.v</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.v</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.getV()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.setV(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonFormat</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonFormat$Shape.OBJECT</outbound>
            <outbound type="class" confirmed="no">java.util.LinkedList</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.ListAsObjectTest$Values()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.values</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.LinkedList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.getType()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.type</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.getValues()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.values</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.setType(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.type</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.setValues(java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.values</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.type</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlAttribute</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.getType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.setType(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.values</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.ListAsObjectTest$Values()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.getValues()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.setValues(java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.ListDeser191Test()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$TestList</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$TestList.items</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$ListItem</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$ListItem.ListDeser191Test$ListItem()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$ListItem.name</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$TestList</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$TestList.ListDeser191Test$TestList()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$TestList.items</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.ListDeserializationTest()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.databind.SerializationFeature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.ListDeserializationTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanUnwrapped</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanUnwrapped.values</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.age</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.notes</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanWrapped</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanWrapped.values</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanWrapped</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanWrapped.values</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters._notes</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanUnwrapped</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanUnwrapped.ListDeserializationTest$ListBeanUnwrapped()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanUnwrapped.values</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanWrapped</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanWrapped.ListDeserializationTest$ListBeanWrapped()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanWrapped.values</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.notes</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person(java.lang.String, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.age</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.notes</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.age</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.id</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.notes</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters._notes</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters._notes</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.id</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters._notes</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.getStuff()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.setStuff(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.getStuff()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters._notes</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.id</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.setStuff(java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters._notes</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.ListRoundtripTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.ListRoundtripTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.ListRoundtripTest$Point(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.y</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer.ListRoundtripTest$PointContainer()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer.points</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.number</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.type</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optionals</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optionals.optional</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.description</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.prop</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents.ListRoundtripTest$Parents()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents.parent</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.ListRoundtripTest$Prop(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.ListRoundtripTest$Optional()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.number</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.type</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.number</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.ListRoundtripTest$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.type</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.ListRoundtripTest$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optionals</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optionals.ListRoundtripTest$Optionals()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optionals.optional</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.prop</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.description</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.prop</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.description</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.name</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.prop</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents.ListRoundtripTest$Parents()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents.parent</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents.parent</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents.ListRoundtripTest$Parents()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.ListRoundtripTest$Point()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.ListRoundtripTest$Point(int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.y</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.x</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.ListRoundtripTest$Point(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.y</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.ListRoundtripTest$Point(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer.ListRoundtripTest$PointContainer()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer.points</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.ListRoundtripTest$Prop()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.ListRoundtripTest$Prop(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.name</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.ListRoundtripTest$Prop(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.value</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.ListRoundtripTest$Prop(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.ListSerializationTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.ListSerializationTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testSimpleWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testStringList()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testSimpleWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testStringList()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.removeSjsxpNamespace(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testSimpleWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testStringList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testSimpleWrappedList()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean(int[])</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testStringList()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean(java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.values</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean(int[])</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.values</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testSimpleWrappedList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.values</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean(int[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.strings</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean(java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.strings</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testStringList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.strings</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.ListWithAttributes()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar.ListWithAttributes$Bar()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar.id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar.value</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.ListWithAttributes$Foo()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.firstBar</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.secondBar</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.assertEquals(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name.text</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$RoomName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$RoomName.names</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.databind.DeserializationFeature)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Root</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Root.values</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar.ListWithAttributes$Bar()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar.id</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar.value</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.ListWithAttributes$Foo()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.firstBar</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.secondBar</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.firstBar</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.ListWithAttributes$Foo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.secondBar</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.ListWithAttributes$Foo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name.ListWithAttributes$Name()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name.language</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name.text</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$RoomName</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$RoomName.ListWithAttributes$RoomName()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$RoomName.names</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Root</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Root.ListWithAttributes$Root()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Root.values</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Value</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Value.ListWithAttributes$Value()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Value.id</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.NestedUnwrappedLists180Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.NestedUnwrappedLists180Test()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.MAPPER</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field.name</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record.fields</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records.records</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field.NestedUnwrappedLists180Test$Field()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field.NestedUnwrappedLists180Test$Field(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field.name</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field.name</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field.NestedUnwrappedLists180Test$Field(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record.NestedUnwrappedLists180Test$Record()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record.fields</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record.fields</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record.NestedUnwrappedLists180Test$Record()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records.NestedUnwrappedLists180Test$Records()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records.records</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records.records</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records.NestedUnwrappedLists180Test$Records()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.NestedUnwrappedListsTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest._xmlMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyNamingStrategy</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy.PropertyNamingStrategy$UpperCamelCaseStrategy()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.setUp()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest._xmlMapper</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.vehicleMonitoringDelivery</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity.recordedAtTime</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.responseTimestamp</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.vehicleActivity</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.responseTimestamp</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.vehicleMonitoringDelivery</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity.recordedAtTime</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.validUntil</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.vehicleActivity</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.responseTimestamp</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.vehicleMonitoringDelivery</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity.recordedAtTime</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.vehicleActivity</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.vehicleMonitoringDelivery</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.vehicleMonitoringDelivery</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.vehicleActivity</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.NestedUnwrappedListsTest$ServiceDelivery()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.responseTimestamp</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.vehicleMonitoringDelivery</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity.NestedUnwrappedListsTest$VehicleActivity()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity.recordedAtTime</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.NestedUnwrappedListsTest$VehicleMonitoringDelivery()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.responseTimestamp</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.validUntil</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.vehicleActivity</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.RootListHandlingTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectReader</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectReader.readValue(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.JacksonAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setDefaultUseWrapper(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readerFor(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writerWithDefaultPrettyPrinter()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.getDescription()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setDescription(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setId(java.lang.Long)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource[]</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testArraySerialization()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectReader</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectReader.readValue(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.JacksonAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.CollectionType</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setDefaultUseWrapper(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.getTypeFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readerFor(com.fasterxml.jackson.databind.JavaType)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writerWithDefaultPrettyPrinter()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.getName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setDescription(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setId(java.lang.Long)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertTrue(boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testListSerialization()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertTrue(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.removeSjsxpNamespace(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testArraySerialization()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testListSerialization()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.withRootName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writer()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource(long, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource(long, java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.description</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.name</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.description</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource(long, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setDescription(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.getDescription()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.description</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.getId()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.id</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.getName()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.name</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.id</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource(long, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.getId()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setId(java.lang.Long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource(long, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.getName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setDescription(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.description</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setId(java.lang.Long)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.id</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setName(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.name</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.UnwrappedListWithEmptyCData129Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.UnwrappedListWithEmptyCData129Test()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.databind.SerializationFeature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test$ListValues</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test$ListValues.value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.testListWithEmptyCData()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.testListWithEmptyCData()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test$ListValues</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test$ListValues.UnwrappedListWithEmptyCData129Test$ListValues()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test$ListValues.value</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElement</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.UnwrappedListsTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setDefaultUseWrapper(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$DefaultList</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$DefaultList.UnwrappedListsTest$DefaultList()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$DefaultList.value</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.UnwrappedListsTest$Value(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setDefaultUseWrapper(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$DefaultList</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$DefaultList.value</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.number</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.type</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optionals</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optionals.optional</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList.UnwrappedListsTest$UnwrappedList()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList.value</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.UnwrappedListsTest$Value(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.UnwrappedListsTest$Value(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList.UnwrappedListsTest$WrappedList()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList.value</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$DefaultList</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$DefaultList.UnwrappedListsTest$DefaultList()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$DefaultList.value</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.UnwrappedListsTest$Optional()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.number</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.type</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.number</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.UnwrappedListsTest$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.type</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.UnwrappedListsTest$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optionals</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optionals.UnwrappedListsTest$Optionals()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optionals.optional</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonRootName</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlRootElement</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList.UnwrappedListsTest$UnwrappedList()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList.value</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$DefaultList.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.UnwrappedListsTest$Value()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.UnwrappedListsTest$Value(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.v</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.v</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.UnwrappedListsTest$Value(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonRootName</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlRootElement</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList.UnwrappedListsTest$WrappedList()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList.value</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value</outbound>
                <outbound type="class" confirmed="no">javax.xml.bind.annotation.XmlElementWrapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.WrappedListsTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.testEmptyList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.WrappedListsTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.xmlMapper(boolean)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.testEmptyList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.testEmptyList()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$Order.WrappedListsTest$Order()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.xmlMapper(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.WrappedListsTest()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$ListItem</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$ListItem.WrappedListsTest$ListItem(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$ListItem.id</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$ListItem.id</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$ListItem.WrappedListsTest$ListItem(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$Order</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$Order.WrappedListsTest$Order()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.testEmptyList()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$Order.line_items</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.misc</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$1.ArrayConversionsTest$1(com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$2.ArrayConversionsTest$2(com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$2.this$0</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.ArrayConversionsTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.convertValue(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getComponentType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isPrimitive()</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testByteArrayFrom(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyByteArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, byte[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, double[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyFloatArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, float[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, int[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyLongArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, long[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyShortArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, short[], java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._numberList(java.lang.Object, int)</name>
                <outbound type="class" confirmed="no">java.lang.Number</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.get(java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</name>
                <outbound type="class" confirmed="no">B[]</outbound>
                <outbound type="class" confirmed="no">F[]</outbound>
                <outbound type="class" confirmed="no">I[]</outbound>
                <outbound type="class" confirmed="no">J[]</outbound>
                <outbound type="class" confirmed="no">S[]</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.bytes()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.doubles()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.floats()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.ints()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.longs()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.shorts()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyByteArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, byte[], java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, double[], java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyFloatArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, float[], java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, int[], java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyLongArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, long[], java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyShortArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, short[], java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testArrayIdentityTransforms()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testByteArrayFrom(com.fasterxml.jackson.databind.ObjectMapper)</name>
                <outbound type="class" confirmed="no">B[]</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testByteArrayFrom()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.convertValue(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper.ArrayConversionsTest$IntArrayWrapper(int[])</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper.values</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntListWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntListWrapper.values</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.xmlMapper(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testListAsProperty()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</name>
                <outbound type="class" confirmed="no">I[]</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.convertValue(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.xmlMapper(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testListToIntArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testNullXform(com.fasterxml.jackson.databind.ObjectMapper)</name>
                <outbound type="class" confirmed="no">B[]</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.convertValue(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testNullXform()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testNullXform(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.bytes()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.doubles()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.floats()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.ints()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.longs()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.shorts()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testShortArrayToX()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testArrayIdentityTransforms()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.xmlMapper(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testByteArrayFrom()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testByteArrayFrom(com.fasterxml.jackson.databind.ObjectMapper)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.xmlMapper(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</name>
                <outbound type="class" confirmed="no">B[]</outbound>
                <outbound type="class" confirmed="no">J[]</outbound>
                <outbound type="class" confirmed="no">S[]</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.convertValue(java.lang.Object, com.fasterxml.jackson.core.type.TypeReference)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$1.ArrayConversionsTest$1(com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._numberList(java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.ints()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, int[], java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testListAsProperty()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testListToIntArray()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</name>
                <outbound type="class" confirmed="no">B[]</outbound>
                <outbound type="class" confirmed="no">I[]</outbound>
                <outbound type="class" confirmed="no">S[]</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.convertValue(java.lang.Object, com.fasterxml.jackson.core.type.TypeReference)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$2.ArrayConversionsTest$2(com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._numberList(java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.longs()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyLongArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, long[], java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testNullXform()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testNullXform(com.fasterxml.jackson.databind.ObjectMapper)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.xmlMapper(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testShortArrayToX()</name>
                <outbound type="class" confirmed="no">B[]</outbound>
                <outbound type="class" confirmed="no">I[]</outbound>
                <outbound type="class" confirmed="no">J[]</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.shorts()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyShortArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, short[], java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyByteArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, byte[], java.lang.Class)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, double[], java.lang.Class)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.valueOf(double)</outbound>
                <outbound type="class" confirmed="no">java.lang.Number</outbound>
                <outbound type="feature" confirmed="no">java.lang.Number.doubleValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.get(java.lang.Object, int)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, double[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyFloatArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, float[], java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyFloatArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, float[], java.lang.Class)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, int[], java.lang.Class)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.valueOf(double)</outbound>
                <outbound type="class" confirmed="no">java.lang.Number</outbound>
                <outbound type="feature" confirmed="no">java.lang.Number.longValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.get(java.lang.Object, int)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testByteArrayFrom(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyByteArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, byte[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, int[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyLongArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, long[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyShortArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, short[], java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyLongArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, long[], java.lang.Class)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyShortArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, short[], java.lang.Class)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testShortArrayToX()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.xmlMapper(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testArrayIdentityTransforms()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testByteArrayFrom()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testNullXform()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$1</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$1.ArrayConversionsTest$1(com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.type.TypeReference.TypeReference()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$1.this$0</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$1.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$1.ArrayConversionsTest$1(com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$2</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.type.TypeReference</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$2.ArrayConversionsTest$2(com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.type.TypeReference.TypeReference()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$2.this$0</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$2.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$2.ArrayConversionsTest$2(com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper.ArrayConversionsTest$IntArrayWrapper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper.ArrayConversionsTest$IntArrayWrapper(int[])</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper.values</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper.values</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper.ArrayConversionsTest$IntArrayWrapper(int[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntListWrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntListWrapper.ArrayConversionsTest$IntListWrapper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntListWrapper.values</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.DTDSupportTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.EmptyPolymorphicTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.MAPPER</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.EmptyPolymorphicTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writerWithDefaultPrettyPrinter()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.EmptyPolymorphicTest$Data(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.EmptyPolymorphicTest$Data()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.EmptyPolymorphicTest$Data(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.proxy</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$EmptyProxy.EmptyPolymorphicTest$EmptyProxy()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Proxy</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.EmptyPolymorphicTest$Data(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.proxy</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSubTypes</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonSubTypes$Type</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.WRAPPER_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.NAME</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$EmptyProxy</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Proxy</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.EmptyPolymorphicTest$Data(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$EmptyProxy</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeName</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Proxy</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.proxy</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$EmptyProxy.EmptyPolymorphicTest$EmptyProxy()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.EmptyPolymorphicTest$Data(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Proxy</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.EmptyPolymorphicTest$Data(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.proxy</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$EmptyProxy</inbound>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.NodeTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.NodeTest.NodeTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonNode</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readTree(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.ObjectId104Test()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.ObjectId104Test()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.MAPPER</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.assertSame(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.node</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.next</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.assertSame(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.next</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.ObjectId104Test$IdWrapper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.ObjectId104Test$IdWrapper(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.node</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.node</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonIdentityInfo</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.ObjectId104Test$IdWrapper(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.ObjectId104Test$IdWrapper(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.node</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.value</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.ObjectId104Test$IdWrapper(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.next</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.value</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.PolymorphicTypesTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest._xmlMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertSame(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.setUp()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.setUp()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest._xmlMapper</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassObject</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject.PolymorphicTypesTest$SubTypeWithClassObject(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassProperty</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty.PolymorphicTypesTest$SubTypeWithClassProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId.id</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper.PolymorphicTypesTest$Wrapper(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper.data</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.assertSame(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassObject</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.WRAPPER_OBJECT</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.CLASS</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassObject.PolymorphicTypesTest$BaseTypeWithClassObject()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject.PolymorphicTypesTest$SubTypeWithClassObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject.PolymorphicTypesTest$SubTypeWithClassObject(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassProperty</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.PROPERTY</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.CLASS</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassProperty.PolymorphicTypesTest$BaseTypeWithClassProperty()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty.PolymorphicTypesTest$SubTypeWithClassProperty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty.PolymorphicTypesTest$SubTypeWithClassProperty(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassObject</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject.PolymorphicTypesTest$SubTypeWithClassObject()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassObject.PolymorphicTypesTest$BaseTypeWithClassObject()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject.PolymorphicTypesTest$SubTypeWithClassObject(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassObject.PolymorphicTypesTest$BaseTypeWithClassObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject.name</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject.PolymorphicTypesTest$SubTypeWithClassObject(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassProperty</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty.PolymorphicTypesTest$SubTypeWithClassProperty()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassProperty.PolymorphicTypesTest$BaseTypeWithClassProperty()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty.PolymorphicTypesTest$SubTypeWithClassProperty(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassProperty.PolymorphicTypesTest$BaseTypeWithClassProperty()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty.name</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty.PolymorphicTypesTest$SubTypeWithClassProperty(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonIdentityInfo</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.PROPERTY</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.CLASS</outbound>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.ObjectIdGenerators$PropertyGenerator</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId.id</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId.id</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper.PolymorphicTypesTest$Wrapper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper.PolymorphicTypesTest$Wrapper(java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper.data</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper.data</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper.PolymorphicTypesTest$Wrapper(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.RootNameTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest._xmlMapper</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest._xmlMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.RootNameTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.withRootName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writer()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$NsRootBean.RootNameTest$NsRootBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBean.RootNameTest$RootBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$NsRootBean</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$NsRootBean.RootNameTest$NsRootBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$NsRootBean.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$NsRootBean.value</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$NsRootBean.RootNameTest$NsRootBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBean</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBean.RootNameTest$RootBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.RootNameTest$RootBeanBase()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBean</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.RootNameTest$RootBeanBase()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.RootNameTest$RootBeanBase(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBean.RootNameTest$RootBean()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.RootNameTest$RootBeanBase(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.RootNameTest$RootBeanBase()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.value</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.RootNameTest$RootBeanBase(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.TextValueTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.TextValueTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.MAPPER</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonProcessingException</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setXMLTextElementName(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$JAXBStyle</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$JAXBStyle.value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.fail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.verifyException(java.lang.Throwable, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.text</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Main</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Main.stack</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.value</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack.slot</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setDefaultUseWrapper(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean.id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean.textValue</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writerWithDefaultPrettyPrinter()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.TextValueTest$Simple()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.textValue</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.TextValueTest$TextOnlyWrapper(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.b</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.xmlMapper(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.verifyException(java.lang.Throwable, java.lang.String[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.xmlMapper(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean.TextValueTest$Issue66Bean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean.id</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean.textValue</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$JAXBStyle</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$JAXBStyle.TextValueTest$JAXBStyle()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$JAXBStyle.value</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Main</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Main.TextValueTest$Main()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Main.stack</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.TextValueTest$Simple()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.text</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.a</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.TextValueTest$Simple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.text</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.TextValueTest$Simple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack.slot</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.TextValueTest$Slot()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.height</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.id</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.name</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.value</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.width</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Main.stack</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack.TextValueTest$Stack()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack.slot</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.TextValueTest$TextOnlyWrapper(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.a</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.b</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.TextValueTest$TextOnlyBean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.TextValueTest$TextOnlyBean(java.lang.String, boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.textValue</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.TextValueTest$TextOnlyWrapper(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.textValue</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.TextValueTest$TextOnlyBean(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.TextValueTest$TextOnlyWrapper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.TextValueTest$TextOnlyWrapper(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.TextValueTest$TextOnlyBean(java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.b</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.a</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.TextValueTest$TextOnlyWrapper(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.b</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.TextValueTest$TextOnlyWrapper(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.UnwrappingWithXMLTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readerFor(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.writerFor(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectReader</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectReader.readValue(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.y</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.location</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.xmlMapper(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readerFor(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.writerFor(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectReader</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectReader.readValue(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.y</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.location</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.xmlMapper(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readerFor(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.writerFor(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectReader</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectReader.readValue(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.y</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.location</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.xmlMapper(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.xmlMapper(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.UnwrappingWithXMLTest$Unwrapping(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.location</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.UnwrappingWithXMLTest$UnwrappingWithAttributes(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.location</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.UnwrappingWithXMLTest$Location()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.UnwrappingWithXMLTest$Location(int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.y</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.UnwrappingWithXMLTest$Unwrapping(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.UnwrappingWithXMLTest$UnwrappingWithAttributes(java.lang.String, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.UnwrappingWithXMLTest$Location(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.y</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.UnwrappingWithXMLTest$Location(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.UnwrappingWithXMLTest$UnwrappingSubWithAttributes(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.location</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.UnwrappingWithXMLTest$LocationWithAttributes()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.UnwrappingWithXMLTest$LocationWithAttributes(int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.y</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.UnwrappingWithXMLTest$UnwrappingSubWithAttributes(java.lang.String, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.x</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.UnwrappingWithXMLTest$LocationWithAttributes(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.y</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.UnwrappingWithXMLTest$LocationWithAttributes(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.UnwrappingWithXMLTest$Unwrapping()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.UnwrappingWithXMLTest$Unwrapping(java.lang.String, int, int)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.UnwrappingWithXMLTest$Location(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.location</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.name</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.location</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonUnwrapped</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.UnwrappingWithXMLTest$Unwrapping(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.UnwrappingWithXMLTest$Unwrapping(java.lang.String, int, int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.UnwrappingWithXMLTest$UnwrappingSubWithAttributes()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.UnwrappingWithXMLTest$UnwrappingSubWithAttributes(java.lang.String, int, int)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.UnwrappingWithXMLTest$LocationWithAttributes(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.location</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.name</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.location</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonUnwrapped</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.UnwrappingWithXMLTest$UnwrappingSubWithAttributes(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.name</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.UnwrappingWithXMLTest$UnwrappingSubWithAttributes(java.lang.String, int, int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.UnwrappingWithXMLTest$UnwrappingWithAttributes()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.UnwrappingWithXMLTest$UnwrappingWithAttributes(java.lang.String, int, int)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.UnwrappingWithXMLTest$Location(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.location</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.name</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.location</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonUnwrapped</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.UnwrappingWithXMLTest$UnwrappingWithAttributes(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.name</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.UnwrappingWithXMLTest$UnwrappingWithAttributes(java.lang.String, int, int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.XmlTextTest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.XmlTextTest()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.xmlMapper(boolean)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Radius</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Radius.value</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed.radius</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed.value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.XmlTextTest$Phone()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonInclude$Include</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonInclude$Include.NON_EMPTY</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude$Include)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.XmlTextTest$Data(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.xmlMapper(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.XmlTextTest()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.XmlTextTest$Data(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.first</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.second</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.first</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.XmlTextTest$Data(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.second</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.XmlTextTest$Data(java.lang.String, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.XmlTextTest$Phone()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.phoneNumber</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.phoneType</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.phoneNumber</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.XmlTextTest$Phone()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.phoneType</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.XmlTextTest$Phone()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Radius</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed.radius</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Radius.XmlTextTest$Radius()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Radius.value</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed.XmlTextTest$WindSpeed()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed.radius</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Radius</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed.units</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed.value</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.ser</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.MAPPER</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.TestBinaryStreamToXMLSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith0Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith1Byte()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith2Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith3Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith4Bytes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.TestBinaryStreamToXMLSerialization()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.MAPPER</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith0Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith1Byte()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith2Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith3Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith4Bytes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo.TestBinaryStreamToXMLSerialization$TestPojo()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo.field</outbound>
                <outbound type="class" confirmed="no">java.nio.Buffer</outbound>
                <outbound type="class" confirmed="no">java.nio.ByteBuffer</outbound>
                <outbound type="feature" confirmed="no">java.nio.ByteBuffer.allocateDirect(int)</outbound>
                <outbound type="feature" confirmed="no">java.nio.ByteBuffer.position(int)</outbound>
                <outbound type="feature" confirmed="no">java.nio.ByteBuffer.put(byte)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith0Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith1Byte()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith2Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith3Bytes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith4Bytes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith0Bytes()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith1Byte()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith2Bytes()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith3Bytes()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith4Bytes()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.MAPPER</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith0Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith1Byte()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith2Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith3Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith4Bytes()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo.TestBinaryStreamToXMLSerialization$TestPojo()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo.field</name>
                <outbound type="class" confirmed="no">java.nio.ByteBuffer</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.TestIndentation$PojoFor123(com.fasterxml.jackson.dataformat.xml.ser.TestIndentation, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.this$0</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.TestIndentation()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation._xmlMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testEmptyElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testWithAttr()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.aposToQuotes(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testEmptyElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testWithAttr()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.setUp()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationFeature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.databind.SerializationFeature, boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.setUp()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation._xmlMapper</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testEmptyElem()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.TestIndentation$PojoFor123(com.fasterxml.jackson.dataformat.xml.ser.TestIndentation, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.FormatFeature</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.with(com.fasterxml.jackson.core.FormatFeature)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writer()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company.TestIndentation$Company()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company.employee</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.TestIndentation$Employee(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.aposToQuotes(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_DECLARATION</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper.i</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.TestIndentation$IntWrapperBean(int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.wrapped</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writerWithDefaultPrettyPrinter()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper.str</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.TestIndentation$StringWrapperBean(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.string</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testWithAttr()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean.TestIndentation$AttrBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2.TestIndentation$AttrBean2()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean.TestIndentation$AttrBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean.count</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testWithAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean.count</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean.TestIndentation$AttrBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2.TestIndentation$AttrBean2()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2.count</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testWithAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2.count</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2.TestIndentation$AttrBean2()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2.value</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2.TestIndentation$AttrBean2()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company.TestIndentation$Company()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company.employee</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company.employee</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company.TestIndentation$Company()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.TestIndentation$Employee(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.id</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.type</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.FULL_TIME</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.id</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.TestIndentation$Employee(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.type</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.TestIndentation$Employee(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.TestIndentation$Employee(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.type</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.$VALUES</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.FULL_TIME</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.TestIndentation$Employee(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.TestIndentation$EmployeeType(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.FULL_TIME</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.TestIndentation$EmployeeType(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.values()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.$VALUES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType[]</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType[].clone()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.values()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType[].clone()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.TestIndentation$IntWrapperBean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.TestIndentation$IntWrapperBean(int)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper.XmlTestBase$IntWrapper(int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.wrapped</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.wrapped</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.TestIndentation$IntWrapperBean(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.TestIndentation$PojoFor123(com.fasterxml.jackson.dataformat.xml.ser.TestIndentation, java.lang.String)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.this$0</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testEmptyElem()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.name</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.TestIndentation$PojoFor123(com.fasterxml.jackson.dataformat.xml.ser.TestIndentation, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.property</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonInclude</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonInclude$Include.NON_EMPTY</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.TestIndentation$PojoFor123(com.fasterxml.jackson.dataformat.xml.ser.TestIndentation, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.TestIndentation$StringWrapperBean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.TestIndentation$StringWrapperBean(java.lang.String)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper.XmlTestBase$StringWrapper(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.string</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.string</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.TestIndentation$StringWrapperBean(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.TestJDKSerializability()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.ByteArrayOutputStream()</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.toString(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.fail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.readObject()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassNotFoundException.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkSerialize(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.toByteArray()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.writeObject(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.TestJDKSerializability$MyPojo(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.y</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkSerialize(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkSerialize(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.TestJDKSerializability$MyPojo()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.TestJDKSerializability$MyPojo(int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.y</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.getY()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.y</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.setY(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.y</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.TestJDKSerializability$MyPojo(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.y</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.TestJDKSerializability$MyPojo(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.getY()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.setY(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.TestNamespaces()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.TestNamespaces$Person()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.setName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.fail(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.TestNamespaces$Person()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.getName()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.name</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.getName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.setName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.setName(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.name</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.TestSerialization()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization._xmlMapper</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization._xmlMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.TestSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataStringArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleNsElem()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataStringArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleNsElem()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.removeSjsxpNamespace(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataStringArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleNsElem()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataString()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringBean.TestSerialization$CDataStringBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataStringArray()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringArrayBean.TestSerialization$CDataStringArrayBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.module.SimpleModule</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.addSerializer(java.lang.Class, com.fasterxml.jackson.databind.JsonSerializer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.TestSerialization$CustomSerializer()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean.TestSerialization$MapBean(java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean.TestSerialization$WrapperBean(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedHashMap.LinkedHashMap()</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedHashMap.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap.TestSerialization$CustomMap()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap.size()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttrAndElem()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.TestSerialization$AttrAndElem()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttribute()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttributeBean.TestSerialization$AttributeBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleNsElem()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$NsElemBean.TestSerialization$NsElemBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.TestSerialization$AttrAndElem()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.attr</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.elem</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttrAndElem()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.attr</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.TestSerialization$AttrAndElem()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.elem</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.TestSerialization$AttrAndElem()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttributeBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttributeBean.TestSerialization$AttributeBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttributeBean.text</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttributeBean.text</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttributeBean.TestSerialization$AttributeBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringArrayBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringArrayBean.TestSerialization$CDataStringArrayBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringArrayBean.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataStringArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringArrayBean.value</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringArrayBean.TestSerialization$CDataStringArrayBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringBean.TestSerialization$CDataStringBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringBean.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringBean.value</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringBean.TestSerialization$CDataStringBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap</name>
            <outbound type="class" confirmed="no">java.util.LinkedHashMap</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap.TestSerialization$CustomMap()</name>
                <outbound type="feature" confirmed="no">java.util.LinkedHashMap.LinkedHashMap()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap.size()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.StdScalarSerializer</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.TestSerialization$CustomSerializer()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.StdScalarSerializer(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.String, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.String, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeString(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean.TestSerialization$MapBean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean.TestSerialization$MapBean(java.util.Map)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean.map</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean.map</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean.TestSerialization$MapBean(java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$NsElemBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$NsElemBean.TestSerialization$NsElemBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$NsElemBean.text</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleNsElem()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$NsElemBean.text</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$NsElemBean.TestSerialization$NsElemBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$StringBean2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$StringBean2.TestSerialization$StringBean2()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$StringBean2.text</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$StringBean2.text</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$StringBean2.TestSerialization$StringBean2()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean.TestSerialization$WrapperBean()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean.TestSerialization$WrapperBean(java.lang.Object)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean.value</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean.value</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean.TestSerialization$WrapperBean(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.TestSerializationAttr$DynaBean(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.TestSerializationAttr$Jurisdiction(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.this$0</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.TestSerializationAttr()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr._xmlMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue6()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testSimpleNsAttr()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue6()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testSimpleNsAttr()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.removeSjsxpNamespace(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testSimpleNsAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.setUp()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.setUp()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr._xmlMapper</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.TestSerializationAttr$DynaBean(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.TestSerializationAttr$Issue19Bean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replaceAll(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue6()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.TestSerializationAttr$Jurisdiction(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testSimpleNsAttr()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$NsAttrBean.TestSerializationAttr$NsAttrBean()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.PROPERTY</outbound>
            <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$Id.NAME</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.TestSerializationAttr$DynaBean(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr, java.util.Map)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean._properties</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.this$0</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.putAll(java.util.Map)</outbound>
                <outbound type="feature" confirmed="no">java.util.TreeMap.TreeMap()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean._properties</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.TestSerializationAttr$DynaBean(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.getProperties()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.getProperties()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonAnyGetter</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean._properties</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.TestSerializationAttr$DynaBean(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr, java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.TestSerializationAttr$Issue19Bean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.booleanA</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.id</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.booleanA</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.TestSerializationAttr$Issue19Bean()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.id</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonProperty</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.TestSerializationAttr$Issue19Bean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.TestSerializationAttr$Jurisdiction(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.value</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue6()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.name</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.TestSerializationAttr$Jurisdiction(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.TestSerializationAttr$Jurisdiction(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.value</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.TestSerializationAttr$Jurisdiction(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$NsAttrBean</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$NsAttrBean.TestSerializationAttr$NsAttrBean()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$NsAttrBean.attr</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testSimpleNsAttr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$NsAttrBean.attr</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$NsAttrBean.TestSerializationAttr$NsAttrBean()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.TestSerializationManual()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.assertTrue(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual$Value</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual$Value.TestSerializationManual$Value(int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.assertTrue(boolean)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_DECLARATION</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeObject(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual$Value</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual$Value.TestSerializationManual$Value(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual$Value.num</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual$Value.num</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual$Value.TestSerializationManual$Value(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.TestSerializationOrdering()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.testOrdering()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.testOrdering()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.TestSerializationOrdering$Bean91(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.TestSerializationOrdering$Bean91(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.a</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.b</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.c</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.testOrdering()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.a</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.TestSerializationOrdering$Bean91(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.b</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.TestSerializationOrdering$Bean91(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.c</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.TestSerializationOrdering$Bean91(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.TestSerializerCustom$ItemSerializer(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.this$0</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.TestSerializerCustom()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Version</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.Version.Version(int, int, int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonDeserializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.Module</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.module.SimpleModule</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.module.SimpleModule.SimpleModule(java.lang.String, com.fasterxml.jackson.core.Version)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.module.SimpleModule.addDeserializer(java.lang.Class, com.fasterxml.jackson.databind.JsonDeserializer)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.module.SimpleModule.addSerializer(java.lang.Class, com.fasterxml.jackson.databind.JsonSerializer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.registerModule(com.fasterxml.jackson.databind.Module)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo.TestSerializerCustom$Foo(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo.name</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.TestSerializerCustom$Item(java.lang.String, com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.obj</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.TestSerializerCustom$ItemDeserializer()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.TestSerializerCustom$ItemSerializer(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.assertNotNull(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.TestSerializerCustom$Item(java.lang.String, com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.obj</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo.TestSerializerCustom$Foo()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo.TestSerializerCustom$Foo(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo.name</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo.TestSerializerCustom$Foo(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonPropertyOrder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.TestSerializerCustom$ItemDeserializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.TestSerializerCustom$ItemSerializer(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.TestSerializerCustom$Item(java.lang.String, com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.obj</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.TestSerializerCustom$Item(java.lang.String, com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.obj</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.TestSerializerCustom$Item(java.lang.String, com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.deser.std.StdDeserializer</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.TestSerializerCustom$ItemDeserializer()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.deser.std.StdDeserializer.StdDeserializer(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getCodec()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonProcessingException</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.ObjectCodec.readTree(com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.ObjectCodec.treeToValue(com.fasterxml.jackson.core.TreeNode, java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.TreeNode</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.DeserializationContext</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonNode</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonNode.asText()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonNode.get(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonNode.path(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.TestSerializerCustom$Item(java.lang.String, com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.StdSerializer</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.TestSerializerCustom$ItemSerializer(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.this$0</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.name</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.obj</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.this$0</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.TestSerializerCustom$ItemSerializer(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.TestXmlDeclaration()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_DECLARATION</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_1_1</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.base.GeneratorBase</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(javax.xml.stream.XMLStreamWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.DEFAULT_UNKNOWN_ELEMENT</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.ObjectCodec</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.base.GeneratorBase.GeneratorBase(int, com.fasterxml.jackson.core.ObjectCodec)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._cfgPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._elementNameStack</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._formatFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._ioContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsCData</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsUnwrapped</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._originalXmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="class" confirmed="no">java.util.LinkedList</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.LinkedList()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.ri.Stax2WriterAdapter.wrapIfNecessary(javax.xml.stream.XMLStreamWriter)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._cfgPrettyPrinter</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._constructDefaultPrettyPrinter()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._elementNameStack</name>
                <outbound type="class" confirmed="no">java.util.LinkedList</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._formatFeatures</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getFormatFeatures()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.isEnabled(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.overrideFormatFeatures(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerationException.JsonGenerationException(java.lang.String, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writePrologLinefeed(org.codehaus.stax2.XMLStreamWriter2)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._elementNameStack</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.LinkedList</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.isEmpty()</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.removeLast()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._elementNameStack</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.LinkedList</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.addLast(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._initialized</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._ioContext</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsCData</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsCData(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsUnwrapped</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsUnwrapped(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextNameIfMissing(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRepeatedFieldName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._originalXmlWriter</name>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getOutputTarget()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._releaseBuffers()</name>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportError(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRepeatedFieldName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerationException.JsonGenerationException(java.lang.String, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._originalXmlWriter</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnsupportedOperation()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawUTF8String(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeUTF8String(byte[], int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.writeValue()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._writeContext</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._writeContext</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.inRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRepeatedFieldName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</name>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getStaxWriter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.canWriteFormattedNumbers()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsUnwrapped</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerationException.JsonGenerationException(java.lang.Throwable, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator$Feature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator$Feature.AUTO_CLOSE_JSON_CONTENT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator$Feature.AUTO_CLOSE_TARGET</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonStreamContext.inArray()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonStreamContext.inObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.base.GeneratorBase.close()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.IOContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.io.IOContext.isResourceManaged()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._ioContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._writeContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.ArrayIndexOutOfBoundsException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.close()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.closeCompletely()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.getMask()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._formatFeatures</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.getMask()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._formatFeatures</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.getEntryCount()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._writeContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator$Feature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator$Feature.FLUSH_PASSED_TO_STREAM</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.flush()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getFormatFeatures()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._formatFeatures</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getOutputBuffered()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getOutputTarget()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._originalXmlWriter</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getStaxWriter()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</name>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.inRoot()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.inRoot()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._writeContext</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writePrologLinefeed(org.codehaus.stax2.XMLStreamWriter2)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_1_1</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_DECLARATION</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.enabledIn(int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._formatFeatures</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._initialized</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartDocument(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.isEnabled(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.getMask()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._formatFeatures</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.overrideFormatFeatures(int, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._formatFeatures</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsCData(boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsCData</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsUnwrapped(boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsUnwrapped</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextNameIfMissing(javax.xml.namespace.QName)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._cfgPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(byte[], int, int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.Base64Variant</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(byte[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeBinary(byte[], int, int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeBinaryAttribute(java.lang.String, java.lang.String, java.lang.String, byte[])</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeBoolean(boolean)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeBooleanAttribute(java.lang.String, java.lang.String, java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter.writeEndArray(com.fasterxml.jackson.core.JsonGenerator, int)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.getEntryCount()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.getParent()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.inArray()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.typeDesc()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._cfgPrettyPrinter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._writeContext</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.getEntryCount()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.getParent()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.inObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.typeDesc()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._cfgPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._writeContext</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.SerializableString</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.SerializableString.getValue()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._writeContext</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStringField(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEmptyElement(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeDouble(double)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeDoubleAttribute(java.lang.String, java.lang.String, java.lang.String, double)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeFloat(float)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeFloatAttribute(java.lang.String, java.lang.String, java.lang.String, float)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeInt(int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeIntAttribute(java.lang.String, java.lang.String, java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.UnsupportedOperationException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator$Feature</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator$Feature.WRITE_BIGDECIMAL_AS_PLAIN</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.toPlainString()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeCharacters(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeDecimal(java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeDecimalAttribute(java.lang.String, java.lang.String, java.lang.String, java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeInteger(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeIntegerAttribute(java.lang.String, java.lang.String, java.lang.String, java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeLong(long)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeLongAttribute(java.lang.String, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeObject(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(char)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeRaw(char[], int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeRaw(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeRaw(java.lang.String, int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawUTF8String(byte[], int, int)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnsupportedOperation()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeRaw(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.SerializableString</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnsupportedOperation()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeRaw(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeRaw(java.lang.String, int, int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRepeatedFieldName()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._writeContext</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter.writeStartArray(com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.createChildArrayContext()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._cfgPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._writeContext</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.PrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.json.JsonWriteContext.createChildObjectContext()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._cfgPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._writeContext</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsCData</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeCData(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeCharacters(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(com.fasterxml.jackson.core.SerializableString)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.SerializableString</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.SerializableString.getValue()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsCData</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeCData(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeCharacters(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(com.fasterxml.jackson.core.SerializableString)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStringField(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStringField(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeUTF8String(byte[], int, int)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnsupportedOperation()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.FormatFeature</outbound>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatWriteFeatureType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.configure(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.isEnabled(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.$VALUES</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.ToXmlGenerator$Feature(java.lang.String, int, boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature._defaultState</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature._mask</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.ordinal()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_1_1</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_DECLARATION</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature._defaultState</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.ToXmlGenerator$Feature(java.lang.String, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.enabledByDefault()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature._mask</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.ToXmlGenerator$Feature(java.lang.String, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.getMask()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.collectDefaults()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.enabledByDefault()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.getMask()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.values()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.enabledByDefault()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature._defaultState</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.collectDefaults()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.enabledIn(int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.getMask()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.getMask()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature._mask</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.collectDefaults()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.enabledIn(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.disable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.enable(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.isEnabled(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.ordinal()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.ToXmlGenerator$Feature(java.lang.String, int, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.ToXmlGenerator$Feature(java.lang.String, int, boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_1_1</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_DECLARATION</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.values()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.$VALUES</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature[]</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature[].clone()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.collectDefaults()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.values()</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature[].clone()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.NameTransformer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._nameTransformer</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.NameTransformer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._nameTransformer</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, java.util.Set)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.NameTransformer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._nameTransformer</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withIgnorals(java.util.Set)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.NameTransformer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._nameTransformer</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._nameTransformer</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.NameTransformer</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._objectIdWriter</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._propertyFilterId</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._serializeWithObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.asArraySerializer()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.handledType()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.isUnwrappingSerializer()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerationException</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._objectIdWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._propertyFilterId</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._serializeWithObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.toString()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.handledType()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.NameTransformer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withFilterId(java.lang.Object)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._objectIdWriter</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withIgnorals(java.util.Set)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, java.util.Set)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</outbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.MARKER_FOR_EMPTY</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JsonSerializer)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JsonSerializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.BeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._qname(com.fasterxml.jackson.databind.PropertyName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrappedQName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrapperQName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.assignSerializer(com.fasterxml.jackson.databind.JsonSerializer)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._dynamicSerializers</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, java.lang.Class, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._handleSelfReference(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JsonSerializer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._name</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._qname(com.fasterxml.jackson.databind.PropertyName)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.getNamespace()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.getSimpleName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._serializer</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._suppressableValue</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._typeSerializer</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrappedQName</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrapperQName</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.assignSerializer(com.fasterxml.jackson.databind.JsonSerializer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.SerializableString</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.io.SerializedString</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeSerializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.serializerFor(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.MARKER_FOR_EMPTY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._dynamicSerializers</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap, java.lang.Class, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._handleSelfReference(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JsonSerializer)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._name</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._serializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._suppressableValue</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._typeSerializer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrappedQName</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrapperQName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withIgnorals(java.util.Set)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._anyGetterWriter</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.asArraySerializer()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._objectIdWriter</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.asArraySerializer()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._propertyFilterId</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.asArraySerializer()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._serializeWithObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.asArraySerializer()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.AnyGetterWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer.BeanAsArraySerializer(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._anyGetterWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._objectIdWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._propertyFilterId</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.handledType()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeStartObject()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._objectIdWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._propertyFilterId</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._serializeWithObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.toString()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.handledType()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.NameTransformer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withFilterId(java.lang.Object)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._objectIdWriter</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withIgnorals(java.util.Set)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer._propertyFilterId</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withIgnorals(java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.KEY_XML_INFO</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getInternalSetting(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getName()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.KEY_XML_INFO</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._cdata</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._filteredProps</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._orderAttributesFirst(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._props</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._textPropertyIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._xmlNames</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.getNamespace()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isText()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.BitSet</outbound>
                <outbound type="feature" confirmed="no">java.util.BitSet.BitSet(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.BitSet.set(int)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._cdata</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._textPropertyIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._xmlNames</outbound>
                <outbound type="class" confirmed="no">java.util.BitSet</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._cdata</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._textPropertyIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._xmlNames</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.BitSet</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.NameTransformer</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._cdata</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._textPropertyIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._xmlNames</outbound>
                <outbound type="class" confirmed="no">java.util.BitSet</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase, java.util.Set)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._cdata</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._textPropertyIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._xmlNames</outbound>
                <outbound type="class" confirmed="no">java.util.BitSet</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._anyGetterWriter</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._cdata</name>
                <outbound type="class" confirmed="no">java.util.BitSet</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._filteredProps</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getInternalSetting(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.KEY_XML_INFO</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isAttribute()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._orderAttributesFirst(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getInternalSetting(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.KEY_XML_INFO</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isCData()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._objectIdWriter</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._orderAttributesFirst(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._propertyFilterId</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._props</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.PROPERTY</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeSerializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeInclusion()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.WritableObjectId</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeWithObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._textPropertyIndex</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._xmlNames</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.isUnwrappingSerializer()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException$Reference</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException$Reference.JsonMappingException$Reference(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException.from(com.fasterxml.jackson.core.JsonGenerator, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException.prependPath(com.fasterxml.jackson.databind.JsonMappingException$Reference)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider.getActiveView()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.AnyGetterWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.AnyGetterWriter.getAndSerialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsCData(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsUnwrapped(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._anyGetterWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._cdata</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._filteredProps</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._props</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._textPropertyIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._xmlNames</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.isUnwrappingSerializer()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Throwable, java.lang.Object, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.StackOverflowError</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.BitSet</outbound>
                <outbound type="feature" confirmed="no">java.util.BitSet.get(int)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException$Reference</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException$Reference.JsonMappingException$Reference(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException.from(com.fasterxml.jackson.core.JsonGenerator, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException.prependPath(com.fasterxml.jackson.databind.JsonMappingException$Reference)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider.getActiveView()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.AnyGetterWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.AnyGetterWriter.getAndSerialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getName()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.PropertyFilter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.PropertyFilter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.ser.PropertyWriter)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.PropertyWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsCData(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsUnwrapped(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._anyGetterWriter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._cdata</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._filteredProps</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._propertyFilterId</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._props</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._textPropertyIndex</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._xmlNames</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.isUnwrappingSerializer()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Throwable, java.lang.Object, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.StackOverflowError</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.BitSet</outbound>
                <outbound type="feature" confirmed="no">java.util.BitSet.get(int)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.annotation.JsonTypeInfo$As.PROPERTY</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeSerializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.jsontype.TypeSerializer.getTypeInclusion()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._objectIdWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeWithObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.KEY_XML_INFO</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Throwable, java.lang.Object, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanSerializerModifier</outbound>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.XmlBeanSerializerModifier()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanSerializerModifier.BeanSerializerModifier()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.BeanDescription</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.NO_NAME</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.construct(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.getSimpleName()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig.getAnnotationIntrospector()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotatedMember</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getMember()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getType()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.getWrapperName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.BeanPropertyWriter.setInternalSetting(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.KEY_XML_INFO</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(com.fasterxml.jackson.databind.JavaType)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.XmlInfo(java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.set(int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonSerializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.BeanDescription</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.std.BeanSerializerBase</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.ROOT_NAME_FOR_NULL</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameLookup</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.XmlRootNameLookup()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.copy()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.SerializerFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameLookup</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.createInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameLookup</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testSerializerProviderCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException.from(com.fasterxml.jackson.core.JsonGenerator, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.TokenBuffer</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._config</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getStaxWriter()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.inRoot()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextNameIfMissing(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamWriter</outbound>
                <outbound type="feature" confirmed="no">javax.xml.stream.XMLStreamWriter.setDefaultNamespace(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.getNamespace()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.getSimpleName()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig.getFullRootName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._config</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.isEmpty()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameLookup</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.ROOT_NAME_FOR_NULL</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonMappingException.JsonMappingException(java.io.Closeable, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.io.Closeable</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.copy()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.createInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ser.SerializerFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.findTypedValueSerializer(com.fasterxml.jackson.databind.JavaType, boolean, com.fasterxml.jackson.databind.BeanProperty)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.findTypedValueSerializer(java.lang.Class, boolean, com.fasterxml.jackson.databind.BeanProperty)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeEndObject()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.BeanProperty</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.cfg.MapperConfig</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._config</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameLookup</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.findTypedValueSerializer(java.lang.Class, boolean, com.fasterxml.jackson.databind.BeanProperty)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeEndObject()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.BeanProperty</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JsonSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializationConfig</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.SerializerProvider</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.cfg.MapperConfig</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._config</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameLookup</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.findTypedValueSerializer(com.fasterxml.jackson.databind.JavaType, boolean, com.fasterxml.jackson.databind.BeanProperty)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(com.fasterxml.jackson.databind.JavaType)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.ROOT_NAME_FOR_NULL</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.stream</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.FormatDetectionTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertFalse(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertNotNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertNull(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertSame(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertTrue(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readerFor(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectReader</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectReader.readValue(byte[])</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectReader.withFormatDetection(com.fasterxml.jackson.databind.ObjectReader[])</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readerFor(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO.FormatDetectionTest$ListPOJO()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO.v</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.FormatDetectionTest$POJO(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.utf8Bytes(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory[])</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.createParserWithMatch()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchStrength()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.hasMatch()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.INCONCLUSIVE</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertFalse(boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.close()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.nextToken()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory[])</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.createParserWithMatch()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatch()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchStrength()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchedFormatName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.hasMatch()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertSame(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertTrue(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.close()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.nextToken()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory[])</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.createParserWithMatch()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatch()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchStrength()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchedFormatName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.hasMatch()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertSame(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertTrue(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.close()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.nextToken()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory[])</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.createParserWithMatch()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatch()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchStrength()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchedFormatName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.hasMatch()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertSame(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertTrue(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.close()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.nextToken()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory[])</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.createParserWithMatch()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatch()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchStrength()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchedFormatName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.hasMatch()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertSame(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertTrue(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.close()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.nextToken()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory[])</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.createParserWithMatch()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatch()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchStrength()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchedFormatName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.DataFormatMatcher.hasMatch()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertSame(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertTrue(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readerFor(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.ObjectReader</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectReader.readValue(byte[])</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectReader.withFormatDetection(com.fasterxml.jackson.databind.ObjectReader[])</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.readerFor(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.y</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.assertNotNull(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.utf8Bytes(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.utf8Bytes(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO.FormatDetectionTest$ListPOJO()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO.v</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO.v</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO.FormatDetectionTest$ListPOJO()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.FormatDetectionTest$POJO()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.FormatDetectionTest$POJO(int, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.x</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.y</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.x</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.FormatDetectionTest$POJO(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.y</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.FormatDetectionTest$POJO(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.XmlGeneratorTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.readAll(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.removeSjsxpNamespace(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.removeSjsxpNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.File, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper.XmlTestBase$IntWrapper(int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.readAll(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.createTempFile(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.delete()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.XmlParserNextXxxTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest._jsonFactory</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest._xmlFactory</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.setUp()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.setUp()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest._xmlFactory</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.FIELD_NAME</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.io.Reader)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest._xmlFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.io.StringReader.StringReader(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.XmlParserTest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._jsonFactory</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.Writer)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.close()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.close()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.nextToken()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._jsonFactory</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(java.lang.String)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._xmlFactory</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimplest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._xmlFactory</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._xmlMapper</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertEquals(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertEquals(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimplest()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertTrue(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertTrue(java.lang.String, boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonFactory.JsonFactory()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlTestBase.setUp()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._jsonFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._xmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._xmlMapper</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_ARRAY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.FIELD_NAME</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_ARRAY</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_STRING</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.io.Reader)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentToken()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getParsingContext()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(java.io.Writer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.inArray()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.inObject()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.inRoot()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._xmlFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertTrue(boolean)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertTrue(java.lang.String, boolean)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.io.StringReader.StringReader(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.close()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.getText()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParser.nextToken()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.FIELD_NAME</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_STRING</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JsonNode</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.ObjectMapper.readTree(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValueAsString(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._xmlMapper</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.verifyFieldName(com.fasterxml.jackson.core.JsonParser, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleNested()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty()</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.EMPTY_ELEMENT_AS_NULL</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimplest()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonToken</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.END_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.FIELD_NAME</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.START_OBJECT</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonToken.VALUE_STRING</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.io.Reader)</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(java.io.Writer)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._xmlFactory</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertEquals(int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertEquals(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.io.StringReader.StringReader(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.verifyFieldName(com.fasterxml.jackson.core.JsonParser, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>com.fasterxml.jackson.dataformat.xml.util</name>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.AnnotationUtil()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector.allIntrospectors()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotatedMember</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector.allIntrospectors()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotatedMember</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector.allIntrospectors()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotatedMember</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector.allIntrospectors()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotatedMember</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter</name>
            <outbound type="class" confirmed="no">com.fasterxml.jackson.core.util.Instantiatable</outbound>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</outbound>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_PRETTY_PRINTER</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.static {}</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.DefaultXmlPrettyPrinter$FixedSpaceIndenter()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.DefaultXmlPrettyPrinter$Lf2SpacesIndenter()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._arrayIndenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._spacesInObjectEntries</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper._defaultPrettyPrinter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._constructDefaultPrettyPrinter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.DefaultXmlPrettyPrinter$FixedSpaceIndenter()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.DefaultXmlPrettyPrinter$Lf2SpacesIndenter()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._arrayIndenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._spacesInObjectEntries</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.createInstance()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._arrayIndenter</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentArraysWith(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentObjectsWith(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._spacesInObjectEntries</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.spacesInObjectEntries(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerationException</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.createInstance()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentArraysWith(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.DefaultXmlPrettyPrinter$NopIndenter()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._arrayIndenter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentObjectsWith(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.DefaultXmlPrettyPrinter$NopIndenter()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.spacesInObjectEntries(boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._spacesInObjectEntries</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndArray(com.fasterxml.jackson.core.JsonGenerator, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeBoolean(boolean)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeBinary(byte[], int, int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeCData(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeCharacters(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeDouble(double)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeFloat(float)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeInt(int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeCData(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeCharacters(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeDecimal(java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeInteger(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeLong(long)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeEmptyElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writePrologLinefeed(org.codehaus.stax2.XMLStreamWriter2)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.SYSTEM_LINE_SEPARATOR</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeRaw(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartArray(com.fasterxml.jackson.core.JsonGenerator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.DefaultXmlPrettyPrinter$FixedSpaceIndenter()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.isInline()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeRaw(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._arrayIndenter</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentArraysWith(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentObjectsWith(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</name>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.DefaultXmlPrettyPrinter$Lf2SpacesIndenter()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.SPACES</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.SPACE_COUNT</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.SYSTEM_LINE_SEPARATOR</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writePrologLinefeed(org.codehaus.stax2.XMLStreamWriter2)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.isInline()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.static {}</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.SPACES</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.SYSTEM_LINE_SEPARATOR</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.fill(char[], char)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.SPACES</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.SYSTEM_LINE_SEPARATOR</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.SPACES</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.SYSTEM_LINE_SEPARATOR</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeRaw(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">org.codehaus.stax2.XMLStreamWriter2.writeRaw(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter</name>
            <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</outbound>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.DefaultXmlPrettyPrinter$NopIndenter()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentArraysWith(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentObjectsWith(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.isInline()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</name>
                <outbound type="class" confirmed="no">org.codehaus.stax2.XMLStreamWriter2</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.util.StaxUtil</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.StaxUtil.StaxUtil()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.StaxUtil._message(java.lang.Throwable, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.StaxUtil._unwrap(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Error</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getCause()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwXmlAsIOException(javax.xml.stream.XMLStreamException)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.setCharAt(int, char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.typeProperty(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonGenerationException.JsonGenerationException(java.lang.String, java.lang.Throwable, com.fasterxml.jackson.core.JsonGenerator)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonGenerator</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._message(java.lang.Throwable, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._unwrap(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</name>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.core.JsonParseException.JsonParseException(com.fasterxml.jackson.core.JsonParser, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.core.JsonParser</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._message(java.lang.Throwable, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._unwrap(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwXmlAsIOException(javax.xml.stream.XMLStreamException)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._unwrap(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.IOException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Deprecated</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamException</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.util.TypeUtil</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.TypeUtil.TypeUtil()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(com.fasterxml.jackson.databind.JavaType)</name>
                <outbound type="class" confirmed="no">B[]</outbound>
                <outbound type="class" confirmed="no">C[]</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JavaType.getRawClass()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JavaType.isContainerType()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JavaType.isMapLikeType()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">B[]</outbound>
                <outbound type="class" confirmed="no">C[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.util.XmlInfo</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlInfo.XmlInfo(java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean)</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isAttribute</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isCData</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isText</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo._namespace</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isAttribute</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.XmlInfo(java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isAttribute()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isCData</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.XmlInfo(java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isCData()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isText</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.XmlInfo(java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isText()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlInfo._namespace</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.XmlInfo(java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.getNamespace()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlInfo.getNamespace()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo._namespace</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isAttribute()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isAttribute</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isCData()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isCData</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isText()</name>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isText</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testSerializerProviderCopy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameLookup</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.XmlRootNameLookup()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.LRUMap</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.util.LRUMap.LRUMap(int, int)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._rootNames</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testSerializerProviderCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.dataformat.xml.JacksonXmlModule)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.readResolve()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.BeanDescription</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.BeanDescription.getClassInfo()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.PropertyName</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.getNamespace()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.PropertyName.getSimpleName()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.cfg.MapperConfig</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.cfg.MapperConfig.getAnnotationIntrospector()</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotatedClass</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getSimpleName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._rootNames</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.LRUMap</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.XmlRootNameLookup()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.readResolve()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.AnnotationIntrospector.allIntrospectors()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.Annotated</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.introspect.AnnotatedClass</outbound>
                <outbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.JavaType</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.JavaType.getRawClass()</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.cfg.MapperConfig</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.cfg.MapperConfig</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.type.ClassKey.ClassKey(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.LRUMap</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.util.LRUMap.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.fasterxml.jackson.databind.util.LRUMap.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._rootNames</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.readResolve()</name>
                <outbound type="class" confirmed="no">com.fasterxml.jackson.databind.util.LRUMap</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.XmlRootNameLookup()</outbound>
                <outbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._rootNames</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.serialVersionUID</name>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.fasterxml.jackson.module.jaxb</name>
        <class confirmed="no">
            <name>com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.XmlAnnotationIntrospector$JaxbWrapper(com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper._intr</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.XmlAnnotationIntrospector$Pair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.JaxbAnnotationIntrospector()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.JaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector(com.fasterxml.jackson.databind.type.TypeFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.io</name>
        <class confirmed="no">
            <name>java.io.BufferedReader</name>
            <feature confirmed="no">
                <name>java.io.BufferedReader.BufferedReader(java.io.Reader)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.BufferedReader.close()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.BufferedReader.readLine()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ByteArrayInputStream</name>
            <feature confirmed="no">
                <name>java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ByteArrayOutputStream</name>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.ByteArrayOutputStream()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkSerialize(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.toByteArray()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkSerialize(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.toString(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.Closeable</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.File</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
            <feature confirmed="no">
                <name>java.io.File.createTempFile(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.delete()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileInputStream</name>
            <feature confirmed="no">
                <name>java.io.FileInputStream.FileInputStream(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileOutputStream</name>
            <feature confirmed="no">
                <name>java.io.FileOutputStream.FileOutputStream(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.IOException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createGenerator(java.io.Writer, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(java.io.ObjectInputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.skipSpace(com.fasterxml.jackson.core.format.InputAccessor, byte)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.validXmlNameStartChar(com.fasterxml.jackson.core.format.InputAccessor, byte)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.core.type.TypeReference)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(javax.xml.stream.XMLStreamWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.utf8Bytes(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyFieldName(com.fasterxml.jackson.core.JsonParser, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._releaseBuffers()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBigIntegerValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getDecimalValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getDoubleValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getEmbeddedObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getFloatValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getIntValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getLongValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getNumberType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getNumberValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextCharacters()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextLength()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextOffset()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.testListAsObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testSimpleWrappedList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testStringList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkSerialize(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.String, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataStringArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttrAndElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleNsElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue6()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testSimpleNsAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawUTF8String(byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRepeatedFieldName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(com.fasterxml.jackson.core.SerializableString)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStringField(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeUTF8String(byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndArray(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartArray(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwXmlAsIOException(javax.xml.stream.XMLStreamException)</inbound>
            <feature confirmed="no">
                <name>java.io.IOException.IOException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.IOException.IOException(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwXmlAsIOException(javax.xml.stream.XMLStreamException)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.IOException.getMessage()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.InputStream</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.InputStreamReader</name>
            <feature confirmed="no">
                <name>java.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ObjectInputStream</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(java.io.ObjectInputStream)</inbound>
            <feature confirmed="no">
                <name>java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectInputStream.close()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectInputStream.defaultReadObject()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(java.io.ObjectInputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectInputStream.readObject()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectInputStream.readUTF()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(java.io.ObjectInputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ObjectOutputStream</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkSerialize(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.close()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkSerialize(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.defaultWriteObject()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.writeObject(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkSerialize(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.writeUTF(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.OutputStream</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkSerialize(java.lang.Object)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.PrintStream</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
            <feature confirmed="no">
                <name>java.io.PrintStream.println(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.Reader</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.Serializable</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.StringReader</name>
            <feature confirmed="no">
                <name>java.io.StringReader.StringReader(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.StringWriter</name>
            <feature confirmed="no">
                <name>java.io.StringWriter.StringWriter()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.StringWriter.close()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.StringWriter.toString()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.UnsupportedEncodingException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.decodeKey(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.encodeKey(java.lang.String)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.Writer</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createGenerator(java.io.Writer, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            <feature confirmed="no">
                <name>java.io.Writer.write(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(java.io.Writer)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang</name>
        <class confirmed="no">
            <name>java.lang.ArrayIndexOutOfBoundsException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Boolean</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.XmlInfo(java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean)</inbound>
            <feature confirmed="no">
                <name>java.lang.Boolean.FALSE</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Boolean.TRUE</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Boolean.booleanValue()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.XmlInfo(java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.CharSequence</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.aposToQuotes(java.lang.String)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Class</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.copy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatReadFeatureType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatWriteFeatureType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.copy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMapWithAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.XmlStringDeserializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testCustomWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testImmutable()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.testCaseInsensitiveComplex()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.testNoContent()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testByteArrayFrom(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testNullXform(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testShortArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyByteArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, byte[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, double[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyFloatArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, float[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, int[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyLongArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, long[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyShortArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, short[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.TestSerialization$CustomSerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.TestSerializerCustom$ItemDeserializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.TestSerializerCustom$ItemSerializer(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(com.fasterxml.jackson.databind.JavaType)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <feature confirmed="no">
                <name>java.lang.Class.forName(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getComponentType()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getSimpleName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.isArray()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.isAssignableFrom(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.isPrimitive()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.newInstance()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassNotFoundException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(java.io.ObjectInputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
            <feature confirmed="no">
                <name>java.lang.ClassNotFoundException.getMessage()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Deprecated</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper._defaultPrettyPrinter()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.XmlJaxbAnnotationIntrospector()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwXmlAsIOException(javax.xml.stream.XMLStreamException)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Double</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
            <feature confirmed="no">
                <name>java.lang.Double.valueOf(double)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Enum</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.valueOf(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.Enum.Enum(java.lang.String, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.MediaItem$Player(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.MediaItem$Size(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.XmlTestBase$FiveMinuteUser$Gender(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.FromXmlParser$Feature(java.lang.String, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.TestEnums$TestEnum(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.EnumIssue9Test$TestEnum(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.TestIndentation$EmployeeType(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.ToXmlGenerator$Feature(java.lang.String, int, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.valueOf(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Error</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._unwrap(java.lang.Throwable)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Exception</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMapWithAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testNullSuppression()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testEmptyTags()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testRootAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testCustomWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testImmutable()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.testCaseInsensitiveComplex()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.testMixed226()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.testNoContent()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testRootName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testSerializeAsAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testArraySerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testListSerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.testListWithEmptyCData()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.testEmptyList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testArrayIdentityTransforms(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testByteArrayFrom(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testNullXform(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testArrayIdentityTransforms()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testByteArrayFrom()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testListAsProperty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testListToIntArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testNullXform()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testShortArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith0Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith1Byte()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith2Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith3Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith4Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testEmptyElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testWithAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.testOrdering()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.setUp()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleNested()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimplest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            <feature confirmed="no">
                <name>java.lang.Exception.getMessage()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalAccessException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalArgumentException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <feature confirmed="no">
                <name>java.lang.IllegalArgumentException.IllegalArgumentException()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.utf8Bytes(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.IllegalArgumentException.getMessage()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalStateException</name>
            <feature confirmed="no">
                <name>java.lang.IllegalStateException.IllegalStateException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.newDelegatingInstance(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.newDelegatingInstance(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._skipUntilTag()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.InstantiationException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Integer</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar.FailingDelegatingCreator254Test$Bar(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test._newSublevel(java.lang.Integer, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean(int[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testNullXform(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            <feature confirmed="no">
                <name>java.lang.Integer.intValue()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Integer.valueOf(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar.FailingDelegatingCreator254Test$Bar(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean(int[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Long</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.getId()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.setId(java.lang.Long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource(long, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.getId()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setId(java.lang.Long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <feature confirmed="no">
                <name>java.lang.Long.valueOf(long)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource(long, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.NoSuchFieldError</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1.static {}</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Number</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getNumberValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._numberList(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
            <feature confirmed="no">
                <name>java.lang.Number.doubleValue()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Number.longValue()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Object</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest$Pojo282</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testSerializerProviderCopy()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.addPerson(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.values()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.values()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.addPhoto(com.fasterxml.jackson.dataformat.xml.MediaItem$Photo)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.core.type.TypeReference)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(javax.xml.stream.XMLStreamWriter, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.values()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.equals(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.toString()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$1</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.idFromValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.idFromValue(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Response</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.package-info</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$BaseResponse</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$InsensitiveCreator</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test$Employee</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(java.lang.String, java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.values()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getEmbeddedObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.NullConversionsGenericTest$GeneralEmpty(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.getValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.value</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorPOJO</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorWrapper</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$PointWrapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Issue167Bean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$Data</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$TwoData</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMapWithAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.values()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$RestrictedView</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testNullSuppression()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentValue</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getCurrentValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getStartLocation(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(org.codehaus.stax2.XMLStreamLocation2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._sourceReference</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testCustomWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testImmutable()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.testCaseInsensitiveComplex()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test$TestList</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.values()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.EnumIssue9Test$UntypedEnumBean(com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Foo</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.singletonMap(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.testMixed226()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassObject</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent$EmptyBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.testNoContent()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean.TestUntypedListSerialization$TypedListBean()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean.TestUntypedListSerialization$UntypedListBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean.list</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.testListAsObject()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Attr</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Param</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$1</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.add(com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$AttrBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$RootBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testRootName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testSerializeAsAttr()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.add(com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Entry</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optionals</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$ListItem</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$TestList</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanUnwrapped</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanWrapped</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optionals</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean(int[])</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testSimpleWrappedList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testStringList()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$RoomName</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Root</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test$ListValues</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$DefaultList</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optionals</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$ListItem</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$Order</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.testEmptyList()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntListWrapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._numberList(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testByteArrayFrom(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testNullXform(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyByteArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, byte[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, double[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyFloatArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, float[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, int[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyLongArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, long[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyShortArrayConversion(com.fasterxml.jackson.databind.ObjectMapper, short[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$EmptyProxy</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Proxy</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassObject</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassProperty</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$NsRootBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$JAXBStyle</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Main</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Radius</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.package-info</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith0Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith1Byte()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith2Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith3Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith4Bytes()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.values()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testEmptyElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testWithAttr()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkSerialize(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttributeBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringArrayBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$NsElemBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$StringBean2</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean.TestSerialization$WrapperBean(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataStringArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttrAndElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleNsElem()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$NsAttrBean</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue6()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testSimpleNsAttr()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual$Value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.testOrdering()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.values()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getOutputTarget()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.asArraySerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withFilterId(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._orderAttributesFirst(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.ser.impl.WritableObjectId)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.createInstance()</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwXmlAsIOException(javax.xml.stream.XMLStreamException)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.readResolve()</inbound>
            <feature confirmed="no">
                <name>java.lang.Object.Object()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest$Pojo282.MapperCopyTest$Pojo282()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.MediaItem$Content()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo(java.lang.String, java.lang.String, int, int, com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.MediaItem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.MediaItem(com.fasterxml.jackson.dataformat.xml.MediaItem$Content)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.PackageVersion()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.XmlAnnotationIntrospector$JaxbWrapper(com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.XmlTestBase$FiveMinuteUser$Name()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.XmlTestBase$FiveMinuteUser$Name(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser(java.lang.String, java.lang.String, boolean, com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender, byte[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper.XmlTestBase$IntWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$IntWrapper.XmlTestBase$IntWrapper(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.XmlTestBase$NameBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.XmlTestBase$NameBean(int, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.XmlTestBase$Point()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.XmlTestBase$Point(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper.XmlTestBase$StringWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper.XmlTestBase$StringWrapper(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item.TestIssue47Attribute$Item()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Response.TestIssue47Attribute$Response()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$BaseResponse.CaseInsensitiveDeserTest$BaseResponse()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$InsensitiveCreator.CaseInsensitiveDeserTest$InsensitiveCreator(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test$Employee.DeserErrorHandling236Test$Employee()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.EmptyStringValueTest$Name()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.EmptyStringValueTest$Name(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names.EmptyStringValueTest$Names()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.Issue274PropertyNameTest$Event()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject.Issue274PropertyNameTest$RootObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.NullConversionsGenericTest$GeneralEmpty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$GeneralEmpty.NullConversionsGenericTest$GeneralEmpty(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorPOJO.NullConversionsGenericTest$NoCtorPOJO(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$NoCtorWrapper.NullConversionsGenericTest$NoCtorWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest$PointWrapper.NullConversionsGenericTest$PointWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.NullConversionsSkipTest$NullSkipField()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.NullConversionsSkipTest$NullSkipMethod()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.NullConversionsSkipTest$StringValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.SimpleStringValuesTest$Bean2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Issue167Bean.SimpleStringValuesTest$Issue167Bean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$Data.TestBinaryData$Data()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData$TwoData.TestBinaryData$TwoData()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean.TestDeserialization$AttributeBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.TestDeserialization$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean.TestEnums$EnumBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$EnumBean.TestEnums$EnumBean(com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Bar.TestViews$Bar()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.TestViews$Foo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.TestViews$Issue44Bean(com.fasterxml.jackson.dataformat.xml.deser.TestViews)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.TestViews$NonNullBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$RestrictedView.TestViews$RestrictedView()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildABC.BuilderSimpleTest$BuildABC()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildFoo.BuilderSimpleTest$BuildFoo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$BuildImmutable.BuilderSimpleTest$BuildImmutable(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SelfBuilder777.BuilderSimpleTest$SelfBuilder777()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$SimpleBuilderXY.BuilderSimpleTest$SimpleBuilderXY()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassABC.BuilderSimpleTest$ValueClassABC(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueClassXY.BuilderSimpleTest$ValueClassXY(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueFoo.BuilderSimpleTest$ValueFoo(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueImmutable.BuilderSimpleTest$ValueImmutable(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Builder.BuilderSimpleTest$ValueInterface2Builder()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterface2Impl.BuilderSimpleTest$ValueInterface2Impl(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceBuilder.BuilderSimpleTest$ValueInterfaceBuilder()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$ValueInterfaceImpl.BuilderSimpleTest$ValueInterfaceImpl(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.CaseInsensitiveDeser273Test$Depot273()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.CaseInsensitiveDeser273Test$Depots273()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test$TestList.EmptyListDeser124Test$TestList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.EnumIssue9Test$UntypedEnumBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$UntypedEnumBean.EnumIssue9Test$UntypedEnumBean(com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Bar.FailingDelegatingCreator254Test$Bar(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test$Foo.FailingDelegatingCreator254Test$Foo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.Issue37AdapterTest$DocWithMapData()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.Issue37AdapterTest$DocWithMapDataSimpleAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.Issue37AdapterTest$MapData()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.Issue37AdapterTest$MapData(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.ListDeser294Test$RootLevel()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel.ListDeser294Test$Sublevel()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassArray.PolymorphicIssue4Test$BaseTypeWithClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$BaseTypeWithClassObject.PolymorphicIssue4Test$BaseTypeWithClassObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.PolymorphicIssue4Test$ClassArrayWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.PolymorphicIssue4Test$ClassArrayWrapper(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo.PolymorphicList97Test$Foo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$Bean.TestConflictingGetters$Bean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo.TestConflictingGetters$BeanInfo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo.TestConflictingGetters$BeanInfo(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.TestDeserialization$EmptyStrings()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent$EmptyBean.TestEmptyContent$EmptyBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean.TestUntypedListSerialization$TypedListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean.TestUntypedListSerialization$UntypedListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.TestUnwrappedDeserIssue86$Issue86()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.TestUnwrappedDeserIssue86$Issue86(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$A.TypeAttributeOrder242Test$A()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Attr.TypeAttributeOrder242Test$Attr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Param.TypeAttributeOrder242Test$Param()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.AttributesWithJAXBTest$Jurisdiction(com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.AttributesWithJAXBTest$Problem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.AttributesWithJAXBTest$Problem(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.BuilderWithJAXB291Test$Address$AddressBuilder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.ElementWrapperTest$MyPerson()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.ElementWrapperTest$MyPerson2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.JAXBObjectId170Test$Company()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer.JAXBObjectId170Test$Computer()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.JAXBObjectId170Test$Employee()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$AttrBean.WithJAXBAnnotationsTest$AttrBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.WithJAXBAnnotationsTest$MyPerson()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$RootBean.WithJAXBAnnotationsTest$RootBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.WithJAXBAnnotationsTest$WithXmlValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.DeserializePolyList178Test$Company()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer.DeserializePolyList178Test$Computer()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config.EmptyListDeserTest$Config()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Entry.EmptyListDeserTest$Entry()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.Issue101UnwrappedListAttributesTest$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optionals.Issue101UnwrappedListAttributesTest$Optionals()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root.Issue101UnwrappedListAttributesTest$Root()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.Issue101UnwrappedListAttributesTest$UnwrappedElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.Issue101UnwrappedListAttributesTest$UnwrappedElement(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point.ListAnnotationSharingTest$Point()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Point.ListAnnotationSharingTest$Point(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.ListAnnotationSharingTest$Wrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.ListAsObjectTest$Value()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$ListItem.ListDeser191Test$ListItem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$TestList.ListDeser191Test$TestList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanUnwrapped.ListDeserializationTest$ListBeanUnwrapped()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanWrapped.ListDeserializationTest$ListBeanWrapped()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.ListRoundtripTest$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optionals.ListRoundtripTest$Optionals()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents.ListRoundtripTest$Parents()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.ListRoundtripTest$Point()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Point.ListRoundtripTest$Point(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer.ListRoundtripTest$PointContainer()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.ListRoundtripTest$Prop()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.ListRoundtripTest$Prop(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean(int[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar.ListWithAttributes$Bar()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.ListWithAttributes$Foo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name.ListWithAttributes$Name()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$RoomName.ListWithAttributes$RoomName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Root.ListWithAttributes$Root()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Value.ListWithAttributes$Value()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field.NestedUnwrappedLists180Test$Field()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field.NestedUnwrappedLists180Test$Field(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record.NestedUnwrappedLists180Test$Record()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records.NestedUnwrappedLists180Test$Records()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.NestedUnwrappedListsTest$ServiceDelivery()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity.NestedUnwrappedListsTest$VehicleActivity()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.NestedUnwrappedListsTest$VehicleMonitoringDelivery()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource(long, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test$ListValues.UnwrappedListWithEmptyCData129Test$ListValues()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$DefaultList.UnwrappedListsTest$DefaultList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.UnwrappedListsTest$Optional()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optionals.UnwrappedListsTest$Optionals()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList.UnwrappedListsTest$UnwrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.UnwrappedListsTest$Value()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.UnwrappedListsTest$Value(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList.UnwrappedListsTest$WrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$ListItem.WrappedListsTest$ListItem(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$Order.WrappedListsTest$Order()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper.ArrayConversionsTest$IntArrayWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntArrayWrapper.ArrayConversionsTest$IntArrayWrapper(int[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntListWrapper.ArrayConversionsTest$IntListWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.EmptyPolymorphicTest$Data()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.EmptyPolymorphicTest$Data(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$EmptyProxy.EmptyPolymorphicTest$EmptyProxy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.ObjectId104Test$IdWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$IdWrapper.ObjectId104Test$IdWrapper(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassObject.PolymorphicTypesTest$BaseTypeWithClassObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$BaseTypeWithClassProperty.PolymorphicTypesTest$BaseTypeWithClassProperty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper.PolymorphicTypesTest$Wrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper.PolymorphicTypesTest$Wrapper(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$NsRootBean.RootNameTest$NsRootBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.RootNameTest$RootBeanBase(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean.TextValueTest$Issue66Bean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$JAXBStyle.TextValueTest$JAXBStyle()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Main.TextValueTest$Main()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.TextValueTest$Simple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.TextValueTest$Slot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack.TextValueTest$Stack()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.TextValueTest$TextOnlyBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.TextValueTest$TextOnlyBean(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.TextValueTest$TextOnlyWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.TextValueTest$TextOnlyWrapper(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.UnwrappingWithXMLTest$Location()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Location.UnwrappingWithXMLTest$Location(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.UnwrappingWithXMLTest$LocationWithAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$LocationWithAttributes.UnwrappingWithXMLTest$LocationWithAttributes(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.UnwrappingWithXMLTest$Unwrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.UnwrappingWithXMLTest$Unwrapping(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.UnwrappingWithXMLTest$UnwrappingSubWithAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.UnwrappingWithXMLTest$UnwrappingSubWithAttributes(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.UnwrappingWithXMLTest$UnwrappingWithAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.UnwrappingWithXMLTest$UnwrappingWithAttributes(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.XmlTextTest$Data(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.XmlTextTest$Phone()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Radius.XmlTextTest$Radius()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed.XmlTextTest$WindSpeed()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo.TestBinaryStreamToXMLSerialization$TestPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean.TestIndentation$AttrBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$AttrBean2.TestIndentation$AttrBean2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company.TestIndentation$Company()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.TestIndentation$Employee(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.TestIndentation$IntWrapperBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$IntWrapperBean.TestIndentation$IntWrapperBean(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.TestIndentation$PojoFor123(com.fasterxml.jackson.dataformat.xml.ser.TestIndentation, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.TestIndentation$StringWrapperBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.TestIndentation$StringWrapperBean(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.TestJDKSerializability$MyPojo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability$MyPojo.TestJDKSerializability$MyPojo(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.TestNamespaces$Person()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.TestSerialization$AttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttributeBean.TestSerialization$AttributeBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringArrayBean.TestSerialization$CDataStringArrayBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringBean.TestSerialization$CDataStringBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean.TestSerialization$MapBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean.TestSerialization$MapBean(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$NsElemBean.TestSerialization$NsElemBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$StringBean2.TestSerialization$StringBean2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean.TestSerialization$WrapperBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$WrapperBean.TestSerialization$WrapperBean(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.TestSerializationAttr$DynaBean(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.TestSerializationAttr$Issue19Bean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.TestSerializationAttr$Jurisdiction(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$NsAttrBean.TestSerializationAttr$NsAttrBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual$Value.TestSerializationManual$Value(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.TestSerializationOrdering$Bean91(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo.TestSerializerCustom$Foo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo.TestSerializerCustom$Foo(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.TestSerializerCustom$Item(java.lang.String, com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO.FormatDetectionTest$ListPOJO()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.FormatDetectionTest$POJO()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$POJO.FormatDetectionTest$POJO(int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.AnnotationUtil()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.DefaultXmlPrettyPrinter$FixedSpaceIndenter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.DefaultXmlPrettyPrinter$Lf2SpacesIndenter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.DefaultXmlPrettyPrinter$NopIndenter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.DefaultXmlPrettyPrinter(com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.StaxUtil()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.TypeUtil()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.XmlInfo(java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.XmlRootNameLookup()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.getClass()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._convert(com.fasterxml.jackson.databind.ObjectMapper, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.toString()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Object[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.RuntimeException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(org.codehaus.stax2.XMLStreamReader2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._unwrap(java.lang.Throwable)</inbound>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.getCause()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(org.codehaus.stax2.XMLStreamReader2)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.StackOverflowError</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.String</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.JacksonXmlModule()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgNameForTextElement</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setXMLTextElementName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(com.fasterxml.jackson.databind.Module$SetupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperCopy()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testMapperSerialization()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._copyright</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._format</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._title</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._uri</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.addPerson(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getCopyright()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getFormat()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getTitle()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getUri()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setCopyright(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setFormat(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.MediaItem$Photo(java.lang.String, java.lang.String, int, int, com.fasterxml.jackson.dataformat.xml.MediaItem$Size)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._title</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo._uri</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getTitle()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.getUri()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Photo.setUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.MediaItem$Player(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Player.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.MediaItem$Size(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Size.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.PackageVersion.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest._verifyRoundtrip(java.lang.String, com.fasterxml.jackson.dataformat.xml.MediaItem)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.RoundtripContentTest.testRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$JaxbWrapper.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.FORMAT_NAME_XML</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlInFactory</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlOutFactory</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLTextElementName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(com.fasterxml.jackson.core.format.InputAccessor)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(java.io.ObjectInputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLTextElementName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.XmlTestBase$FiveMinuteUser$Gender(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.XmlTestBase$FiveMinuteUser$Name(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._first</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name._last</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.getFirst()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.getLast()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.setFirst(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.setLast(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser.XmlTestBase$FiveMinuteUser(java.lang.String, java.lang.String, boolean, com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Gender, byte[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.XmlTestBase$NameBean(int, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.first</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$NameBean.last</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.XmlTestBase$StringBean(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper.XmlTestBase$StringWrapper(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringWrapper.str</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_DOC_JSON_SPEC</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_TITLE</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_TN_URL</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.SAMPLE_SPEC_VALUE_TN_WIDTH</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.aposToQuotes(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.removeSjsxpNamespace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.utf8Bytes(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyFieldName(com.fasterxml.jackson.core.JsonParser, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.idFromValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.idFromValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.typeProperty(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item.a</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item.b</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Item.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper.USE_PROPERTY_NAME</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper.localName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper.namespace()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty.localName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty.namespace()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement.localName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement.namespace()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest$BaseResponse.debugMessage</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test$Employee.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.ElementWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperNamespace</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperLocalName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperNamespace()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.intermediateWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.isMatching()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchingWrapper(com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.EmptyStringValueTest$Name(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.first</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Name.last</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyString162()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.testEmptyStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest.testEmptyString162()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.FromXmlParser$Feature(java.lang.String, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._cfgNameForTextElement</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currText</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._isEmpty(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextCharacters()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextLength()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setXMLTextElementName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.EventId</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.getEventId()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$Event.setEventId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest$RootObject.generated</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.XML</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest.testIssue274()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.EMPTY_XML</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.NullConversionsSkipTest$NullSkipField()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.noNulls</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipField.nullsOk</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.NullConversionsSkipTest$NullSkipMethod()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._noNulls</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod._nullsOk</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.setNoNulls(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$NullSkipMethod.setNullsOk(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.NullConversionsSkipTest$StringValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.setValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest$StringValue.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullField2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullMethod2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest.testSkipNullWithDefaults()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.a</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.b</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Issue167Bean.d</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testEmptyElementToString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testMissingString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testSimpleStringElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringArrayWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean.TestDeserialization$AttributeBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$AttributeBean.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.TestDeserialization$Optional()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.number</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization$Optional.type</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testFromAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMapWithAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMissingOptionalAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testOptionalAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testRoundTripWithJacksonExample()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.TestEnums$TestEnum(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums$TestEnum.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestEnums.testEnum()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Foo.restrictedFooProperty</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.TestViews$Issue44Bean(com.fasterxml.jackson.dataformat.xml.deser.TestViews)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$Issue44Bean.first</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.TestViews$NonNullBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews$NonNullBean.nullName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue44()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testIssue7()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestViews.testNullSuppression()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.newDelegatingInstance(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.XmlBeanDeserializerModifier(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._cfgNameForTextValue</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._wrappedName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getCurrentName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.hasCurrentName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.XmlStringDeserializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.newDelegatingInstance(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._allWs(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(org.codehaus.stax2.XMLStreamReader2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextLocalName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextNamespaceURI</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._skipUntilTag()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._textValue</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getNamespaceURI()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest$NopModule1557.getModuleName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testCustomWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testImmutable()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testMultiAccess()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSelfBuilder777()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.number</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depot273.setNumber(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.command</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.taskId</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test.testCaseInsensitiveComplex()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.EnumIssue9Test$TestEnum(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test$TestEnum.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testRootEnumIssue121()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.FailingDelegatingCreator254Test.testIntList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.Issue37AdapterTest$MapData(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.key</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.ENCODING</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.decodeKey(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.encodeKey(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.Issue37AdapterTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.singletonMap(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$Sublevel.sublevel</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test._newSublevel(java.lang.Integer, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.MixedContentTreeRead226Test.testMixed226()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$ClassArrayWrapper.PolymorphicIssue4Test$ClassArrayWrapper(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.PolymorphicIssue4Test$SubTypeWithClassArray(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassArray.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassObject.PolymorphicIssue4Test$SubTypeWithClassObject(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test$SubTypeWithClassObject.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsClassArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicIssue4Test.testAsWrappedClassArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$Foo.data</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooGood.bar</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo.TestConflictingGetters$BeanInfo(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters$BeanInfo.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestConflictingGetters.testIssue27()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.TestDeserialization$EmptyStrings()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.a</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization$EmptyStrings.b</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestDeserialization.testEmptyStringFromElemAndAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestEmptyContent.testNoContent()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization.testListAsObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.TestUnwrappedDeserIssue86$Issue86(java.lang.String, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Param.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.AttributesWithJAXBTest$Jurisdiction(com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.AttributesWithJAXBTest$Problem(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.description</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testAttributeAndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest.testTwoAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.BuilderWithJAXB291Test$Address$AddressBuilder(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.address1</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.city</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.country</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.county</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.postalCode</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.setCounty(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.stateProvince</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.BuilderWithJAXB291Test$Address(com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.address1</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.city</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.country</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.county</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getAddress1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getCity()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getCountry()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getCounty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getPostalCode()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.getStateProvince()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.postalCode</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address.stateProvince</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test.testBuilder291()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.location</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$DesktopComputer.with(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$LaptopComputer.vendor</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$AttrBean.WithJAXBAnnotationsTest$AttrBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$AttrBean.attr</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.firstName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.getFirstName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.getLastName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.lastName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.setFirstName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.setLastName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$RootBean.WithJAXBAnnotationsTest$RootBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$RootBean.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.WithJAXBAnnotationsTest$WithXmlValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testAsTextWithJAXB()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testPersonAsXml()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testRootName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest.testSerializeAsAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.location</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$DesktopComputer.with(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$LaptopComputer.vendor</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Entry.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.Issue101UnwrappedListAttributesTest$Optional()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.number</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optional.type</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.Issue101UnwrappedListAttributesTest$UnwrappedElement(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$UnwrappedElement.type</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.getV()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.setV(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.v</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.getType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.setType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.type</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$ListItem.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.ListRoundtripTest$Optional()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.number</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optional.type</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.description</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.ListRoundtripTest$Prop(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Prop.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testSimpleWrappedList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest.testStringList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Bar.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name.language</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Name.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field.NestedUnwrappedLists180Test$Field(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Field.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.responseTimestamp</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleActivity.recordedAtTime</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.responseTimestamp</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.validUntil</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.RootListHandlingTest$SampleResource(long, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.description</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setDescription(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest$SampleResource.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test.testListWithEmptyCData()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.UnwrappedListsTest$Optional()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.number</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optional.type</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.UnwrappedListsTest$Value(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Value.v</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testDefaultWrappingWithEmptyLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testUnwrappedLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testWrappedLists()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest.testEmptyList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testByteArrayFrom(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testNullXform(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.EmptyPolymorphicTest$Data(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest$Data.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.EmptyPolymorphicTest.testEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject.PolymorphicTypesTest$SubTypeWithClassObject(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassObject.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty.PolymorphicTypesTest$SubTypeWithClassProperty(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$SubTypeWithClassProperty.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$TypeWithClassPropertyAndObjectId.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsClassProperty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$NsRootBean.RootNameTest$NsRootBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$NsRootBean.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.RootNameTest$RootBeanBase()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.RootNameTest$RootBeanBase(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest$RootBeanBase.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Issue66Bean.textValue</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$JAXBStyle.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.TextValueTest$Simple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Simple.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.height</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Slot.width</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$Stack.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.TextValueTest$TextOnlyBean(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyBean.textValue</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest$TextOnlyWrapper.TextValueTest$TextOnlyWrapper(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testDeserializeAsText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue24()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testIssue66()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testSerializeAsText()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testTextOnlyPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.UnwrappingWithXMLTest$Unwrapping(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$Unwrapping.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.UnwrappingWithXMLTest$UnwrappingSubWithAttributes(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingSubWithAttributes.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.UnwrappingWithXMLTest$UnwrappingWithAttributes(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest$UnwrappingWithAttributes.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testSimpleUnwrappingRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingSubWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest.testUnwrappingWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.XmlTextTest$Data(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.first</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Data.second</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.XmlTextTest$Phone()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.phoneNumber</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$Phone.phoneType</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest$WindSpeed.units</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testSimple198()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testXmlTextWithSuppressedValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith0Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith1Byte()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith2Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith3Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.testWith4Bytes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.TestIndentation$Employee(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Employee.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.TestIndentation$EmployeeType(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$EmployeeType.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.TestIndentation$PojoFor123(com.fasterxml.jackson.dataformat.xml.ser.TestIndentation, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$PojoFor123.property</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$StringWrapperBean.TestIndentation$StringWrapperBean(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testEmptyElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testWithAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._writeXml(com.fasterxml.jackson.dataformat.xml.XmlFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testMapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.testXmlFactory()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces$Person.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.TestSerialization$AttrAndElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttrAndElem.elem</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttributeBean.TestSerialization$AttributeBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$AttributeBean.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringArrayBean.TestSerialization$CDataStringArrayBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringArrayBean.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringBean.TestSerialization$CDataStringBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CDataStringBean.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.TestSerialization$CustomSerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.String, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$NsElemBean.TestSerialization$NsElemBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$NsElemBean.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$StringBean2.TestSerialization$StringBean2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$StringBean2.text</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCDataStringArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testCustomSerializer()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testNakedMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttrAndElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testSimpleNsElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.TestSerializationAttr$Issue19Bean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Issue19Bean.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.TestSerializationAttr$Jurisdiction(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$Jurisdiction.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$NsAttrBean.TestSerializationAttr$NsAttrBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$NsAttrBean.attr</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue6()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testSimpleNsAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.TestSerializationOrdering$Bean91(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.a</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.b</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering$Bean91.c</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering.testOrdering()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo.TestSerializerCustom$Foo(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.TestSerializerCustom$Item(java.lang.String, com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Foo)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$ItemSerializer.serialize(com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom$Item, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom.testIssue42()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml10Declaration()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration.testXml11Declaration()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.ToXmlGenerator$Feature(java.lang.String, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.DEFAULT_UNKNOWN_ELEMENT</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRepeatedFieldName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(com.fasterxml.jackson.core.SerializableString)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStringField(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._qname(com.fasterxml.jackson.databind.PropertyName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.KEY_XML_INFO</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(com.fasterxml.jackson.databind.ser.BeanPropertyWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleViaObjectReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(com.fasterxml.jackson.dataformat.xml.XmlFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest._readXmlWriteJson(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testForceElementAsArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleNested()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimpleWithEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testSimplest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testXmlAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.SYSTEM_LINE_SEPARATOR</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writePrologLinefeed(org.codehaus.stax2.XMLStreamWriter2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._message(java.lang.Throwable, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.XmlInfo(java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo._namespace</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlInfo.getNamespace()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <feature confirmed="no">
                <name>java.lang.String.String(byte[], java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.String(char[], int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.String(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.charAt(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._isEmpty(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._allWs(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.contains(java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.endsWith(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$FiveMinuteUser$Name.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.format(java.lang.String, java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$Point.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.toString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.getBytes(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.utf8Bytes(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testByteArrayFrom(com.fasterxml.jackson.databind.ObjectMapper)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleInvalid()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidComment()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidDoctype()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidPI()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testSimpleValidXmlDecl()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.indexOf(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.indexOf(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.removeSjsxpNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.isEmpty()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.lastIndexOf(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.lastIndexOf(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.lastIndexOf(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.lastIndexOf(java.lang.String, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.length()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(com.fasterxml.jackson.core.format.InputAccessor, java.lang.String, com.fasterxml.jackson.core.format.MatchStrength)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.removeSjsxpNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.typeProperty(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._isEmpty(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextLength()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._allWs(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.aposToQuotes(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.replaceAll(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue19()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.startsWith(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.substring(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.removeSjsxpNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.substring(int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.removeSjsxpNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.toCharArray()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextCharacters()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.toLowerCase()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.trim()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest.testRenamedRootItem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testWriteToFile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.valueOf(char)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.valueOf(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest.testRoundTripWithSample()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.StringBuilder</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.removeSjsxpNamespace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.String, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.toString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.StringBuilder()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.removeSjsxpNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.String, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.StringBuilder(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.StringBuilder(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(char)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.removeSjsxpNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.String, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.replace(int, int, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.setCharAt(int, char)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.toString()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.VersionInfoTest.assertVersion(com.fasterxml.jackson.core.Versioned)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase$StringBean.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.assertToken(com.fasterxml.jackson.core.JsonToken, com.fasterxml.jackson.core.JsonToken)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.getAndVerifyText(com.fasterxml.jackson.core.JsonParser)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.readAll(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.removeSjsxpNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest$Bean2.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData.testTwoBinaryProps()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EnumIssue9Test.testUntypedEnum()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testArraySerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testRootNameAnnotation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleIntBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleStringBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability.jdkDeserialize(byte[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces.testRootNamespace()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomSerializer.serialize(java.lang.String, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.toString()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(com.fasterxml.jackson.core.JsonGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.String[]</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToEmptyArrays()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.System</name>
            <feature confirmed="no">
                <name>java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._orderAttributesFirst(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[], com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.getProperty(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.out</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.NodeTest.testMixed()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Throwable</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.utf8Bytes(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest.testCaseInsensitive1036()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test.testExceptionWrapping()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.NullConversionsGenericTest.testNullsToGenericPojo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(org.codehaus.stax2.XMLStreamReader2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest.testSimpleWithIgnores()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.TextValueTest.testAlternateTextElementName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._message(java.lang.Throwable, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._unwrap(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwXmlAsIOException(javax.xml.stream.XMLStreamException)</inbound>
            <feature confirmed="no">
                <name>java.lang.Throwable.getCause()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._unwrap(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Throwable.getMessage()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil._message(java.lang.Throwable, java.lang.Throwable)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.UnsupportedOperationException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.UnsupportedOperationException.UnsupportedOperationException()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.expectComma()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang.annotation</name>
        <class confirmed="no">
            <name>java.lang.annotation.Annotation</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(com.fasterxml.jackson.databind.introspect.Annotated)</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.annotation.ElementType</name>
            <feature confirmed="no">
                <name>java.lang.annotation.ElementType.FIELD</name>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.annotation.ElementType.METHOD</name>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.annotation.ElementType.PARAMETER</name>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.annotation.ElementType.TYPE</name>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.annotation.Retention</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.annotation.RetentionPolicy</name>
            <feature confirmed="no">
                <name>java.lang.annotation.RetentionPolicy.RUNTIME</name>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.annotation.Target</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang.reflect</name>
        <class confirmed="no">
            <name>java.lang.reflect.Array</name>
            <feature confirmed="no">
                <name>java.lang.reflect.Array.get(java.lang.Object, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._numberList(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyDoubleArrays(java.lang.Object, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.verifyIntegralArrays(java.lang.Object, java.lang.Object, int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Type</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.math</name>
        <class confirmed="no">
            <name>java.math.BigDecimal</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getDecimalValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
            <feature confirmed="no">
                <name>java.math.BigDecimal.toPlainString()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.math.BigInteger</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBigIntegerValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.net</name>
        <class confirmed="no">
            <name>java.net.URLDecoder</name>
            <feature confirmed="no">
                <name>java.net.URLDecoder.decode(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.decodeKey(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.net.URLEncoder</name>
            <feature confirmed="no">
                <name>java.net.URLEncoder.encode(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.encodeKey(java.lang.String)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.nio</name>
        <class confirmed="no">
            <name>java.nio.Buffer</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</inbound>
        </class>
        <class confirmed="no">
            <name>java.nio.ByteBuffer</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo.field</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</inbound>
            <feature confirmed="no">
                <name>java.nio.ByteBuffer.allocateDirect(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.nio.ByteBuffer.position(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.nio.ByteBuffer.put(byte)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization.createPojo(char[])</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util</name>
        <class confirmed="no">
            <name>java.util.ArrayList</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test$TestList.items</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.addPerson(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.addPhoto(com.fasterxml.jackson.dataformat.xml.MediaItem$Photo)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names.EmptyStringValueTest$Names()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.ListDeser294Test$RootLevel()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean.TestUntypedListSerialization$TypedListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean.TestUntypedListSerialization$UntypedListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.ElementWrapperTest$MyPerson()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.ElementWrapperTest$MyPerson2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.JAXBObjectId170Test$Company()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.add(com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.DeserializePolyList178Test$Company()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.add(com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.ListAnnotationSharingTest$Wrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.ListAsObjectTest$Values()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents.ListRoundtripTest$Parents()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean(int[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.ListWithAttributes$Foo()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record.NestedUnwrappedLists180Test$Record()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records.NestedUnwrappedLists180Test$Records()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company.TestIndentation$Company()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO.FormatDetectionTest$ListPOJO()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._numberList(java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList(java.util.Collection)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean.TestUntypedListSerialization$TypedListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$UntypedListBean.TestUntypedListSerialization$UntypedListBean()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._numberList(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.iterator()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.size()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeser191Test.testListDeser()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Arrays</name>
            <feature confirmed="no">
                <name>java.util.Arrays.asList(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Arrays.fill(char[], char)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.BitSet</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._cdata</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <feature confirmed="no">
                <name>java.util.BitSet.BitSet(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.BitSet.get(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.BitSet.set(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Collection</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <feature confirmed="no">
                <name>java.util.Collection.iterator()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.HashMap</name>
            <feature confirmed="no">
                <name>java.util.HashMap.HashMap()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.singletonMap(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.HashSet</name>
            <feature confirmed="no">
                <name>java.util.HashSet.HashSet()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.HashSet.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Iterator</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JsonDeserializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            <feature confirmed="no">
                <name>java.util.Iterator.hasNext()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Iterator.next()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(com.fasterxml.jackson.databind.DeserializationConfig, java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedMember)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findNamespace(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedClass)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.LinkedHashMap</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap</inbound>
            <feature confirmed="no">
                <name>java.util.LinkedHashMap.LinkedHashMap()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$CustomMap.TestSerialization$CustomMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.LinkedHashMap.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.LinkedList</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._elementNameStack</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
            <feature confirmed="no">
                <name>java.util.LinkedList.LinkedList()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.ListAsObjectTest$Values()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.LinkedList.addLast(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.LinkedList.isEmpty()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.LinkedList.removeLast()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.List</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content._persons</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.addPerson(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.getPersons()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.setPersons(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem._photos</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.addPhoto(com.fasterxml.jackson.dataformat.xml.MediaItem$Photo)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.getImages()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.setImages(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.verifyException(java.lang.Throwable, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute$Response.items</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names.EmptyStringValueTest$Names()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest$Names.names</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.element</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.CaseInsensitiveDeser273Test$Depots273.setElement(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test$TestList.list</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.ListDeser294Test$RootLevel()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test$RootLevel.sublevels</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test$FooBad.bar</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean.TestUntypedListSerialization$TypedListBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUntypedListSerialization$TypedListBean.list</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.TestUnwrappedDeserIssue86$Issue86(java.lang.String, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.children</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86.testDeserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test$Attr.param</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.ElementWrapperTest$MyPerson()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.children</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.ElementWrapperTest$MyPerson2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2.child</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.JAXBObjectId170Test$Company()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.add(com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.computers</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.employees</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.DeserializePolyList178Test$Company()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.add(com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.computers</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest$Config.entry</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Optionals.optional</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest$Root.unwrapped</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testWithTwoAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.ListAnnotationSharingTest$Wrapper()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.getPoints()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest$Wrapper.points</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.ListAsObjectTest$Values()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.getValues()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.setValues(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanUnwrapped.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$ListBeanWrapped.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.ListDeserializationTest$Person(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$Person.notes</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.ListDeserializationTest$PersonWithGetters(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters._notes</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.getStuff()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest$PersonWithGetters.setStuff(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Optionals.optional</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.ListRoundtripTest$Parent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parent.prop</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents.ListRoundtripTest$Parents()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$Parents.parent</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest$PointContainer.points</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean(int[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.strings</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.ListWithAttributes$Foo()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.firstBar</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Foo.secondBar</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$RoomName.names</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes$Root.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record.NestedUnwrappedLists180Test$Record()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Record.fields</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records.NestedUnwrappedLists180Test$Records()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test$Records.records</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$ServiceDelivery.vehicleMonitoringDelivery</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest$VehicleMonitoringDelivery.vehicleActivity</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test$ListValues.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$Optionals.optional</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest$Order.line_items</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest$IntListWrapper.values</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._numberList(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testIntArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest.testLongArrayToX()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper.PolymorphicTypesTest$Wrapper(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest$Wrapper.data</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company.TestIndentation$Company()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation$Company.employee</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO.FormatDetectionTest$ListPOJO()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest$ListPOJO.v</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            <feature confirmed="no">
                <name>java.util.List.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem$Content.addPerson(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.MediaItem.addPhoto(com.fasterxml.jackson.dataformat.xml.MediaItem$Photo)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest.testNoElementWrapper()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.add(com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Computer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Company.add(com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test$Computer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$ListBean.ListSerializationTest$ListBean(int[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest$StringListBean.ListSerializationTest$StringListBean(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListToIntArray(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test$ValueNode.ObjectId104Test$ValueNode(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testMultiLevel172()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TestUnwrappedDeserIssue86$Issue86.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.get(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute.testEmptyStringFromElemAndAttr()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIdsFromAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test.testSimpleCollectionDeserWithForwardRefs()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest.testAsPropertyWithObjectId()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.set(int, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.size()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest.testStringsInList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.EmptyListDeser124Test.test124()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.ListDeser294Test.testNestedLists294()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.TypeAttributeOrder242Test.testAttributeOrder()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test.testPolyIdList178()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest.testEmptyList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest.testAnnotationSharing()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest.testCollection()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testUnwrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedList()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListBeanDeser()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest.testWrappedListWithGetters()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testListWithAttrOnlyValues()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testOptionals()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest.testParentListRoundtrip()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testIssue43()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributes.testListWithAttributes()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested1_2b()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNested2_1()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest._testListSerialization(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test._testListWithEmptyCData(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest.testOptionalsWithMissingType()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest._testListAsProperty(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest.testListViaObjectReader()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Map</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization.testMapWithAttr()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.mapDatas</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.mapDatas</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.Issue37AdapterTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.needEncodingMapData</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.simpleMapData</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.singletonMap(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMapSimpleAnnotation_nonJaxb()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testNeedEncodingKeyMap_nonJaxb()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.testSimpleKeyMapSimpleAnnotation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest.testDTDAttempt()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean.TestSerialization$MapBean(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization$MapBean.map</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerialization.testMap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.TestSerializationAttr$DynaBean(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean._properties</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.getProperties()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
            <feature confirmed="no">
                <name>java.util.Map.entrySet()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.unmarshal(com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData[])</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest.singletonMap(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr.testIssue117AnySetterAttrs()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.putAll(java.util.Map)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.TestSerializationAttr$DynaBean(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.size()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestIndentation.testSimpleMap()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Map$Entry</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.util.Map$Entry.getKey()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map$Entry.getValue()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Set</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._namesToWrap</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(com.fasterxml.jackson.core.JsonToken)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.WrapperHandlingDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._namesToWrap</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._namesToWrap</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getNamesToWrap()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setNamesToWrap(java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.UnwrappingXmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withIgnorals(java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.XmlBeanSerializer(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withIgnorals(java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
            <feature confirmed="no">
                <name>java.util.Set.contains(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(java.util.Set)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.iterator()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.marshal(java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.TreeMap</name>
            <feature confirmed="no">
                <name>java.util.TreeMap.TreeMap()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr$DynaBean.TestSerializationAttr$DynaBean(com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr, java.util.Map)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>javax.xml.bind</name>
        <class confirmed="no">
            <name>javax.xml.bind.JAXB</name>
            <feature confirmed="no">
                <name>javax.xml.bind.JAXB.marshal(java.lang.Object, java.io.Writer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.JAXBContext</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            <feature confirmed="no">
                <name>javax.xml.bind.JAXBContext.createMarshaller()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.bind.JAXBContext.newInstance(java.lang.Class[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.Marshaller</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            <feature confirmed="no">
                <name>javax.xml.bind.Marshaller.marshal(java.lang.Object, java.io.Writer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.jaxbSerialized(java.lang.Object, java.lang.Class[])</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>javax.xml.bind.annotation</name>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.XmlAccessType</name>
            <feature confirmed="no">
                <name>javax.xml.bind.annotation.XmlAccessType.FIELD</name>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction</inbound>
                <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.XmlAccessorType</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee</inbound>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.XmlAttribute</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Jurisdiction.value</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.name</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$AttrBean.attr</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.id</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.a</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Values.type</inbound>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.XmlElement</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.address1</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.city</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.country</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.county</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.postalCode</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test$Address$AddressBuilder.stateProvince</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.children</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.computers</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.employees</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.firstName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson.lastName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest$Value.v</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test$ListValues.value</inbound>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.XmlElementWrapper</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson.children</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.computers</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Company.employees</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList.value</inbound>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.XmlID</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.id</inbound>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.XmlIDREF</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee.computer</inbound>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.XmlRootElement</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest$Problem</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest$MyPerson2</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$MyPerson</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$RootBean</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$UnwrappedList</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest$WrappedList</inbound>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.XmlType</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test$Employee</inbound>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.XmlValue</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest$WithXmlValue.text</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>javax.xml.bind.annotation.adapters</name>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.adapters.XmlAdapter</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter</inbound>
            <feature confirmed="no">
                <name>javax.xml.bind.annotation.adapters.XmlAdapter.XmlAdapter()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$URLEncoderMapDataAdapter.Issue37AdapterTest$URLEncoderMapDataAdapter()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapData.mapDatas</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$DocWithMapDataSimpleAnnotation.mapDatas</inbound>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.Issue37AdapterTest$MapData</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>javax.xml.namespace</name>
        <class confirmed="no">
            <name>javax.xml.namespace.QName</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextNameIfMissing(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRepeatedFieldName()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.XmlBeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._qname(com.fasterxml.jackson.databind.PropertyName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrappedQName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrapperQName</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, com.fasterxml.jackson.databind.util.NameTransformer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase, java.util.Set)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._xmlNames</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.ROOT_NAME_FOR_NULL</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            <feature confirmed="no">
                <name>javax.xml.namespace.QName.QName(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability._write(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual.testIssue54()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testAttrAndElem()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArratAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawCharArrayValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawOffsetValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testRawSimpleValue()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSecondLevelAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleAttribute()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest.testSimpleElement()</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.namespace.QName.QName(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._qname(com.fasterxml.jackson.databind.PropertyName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.XmlBeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(java.lang.Class, com.fasterxml.jackson.databind.cfg.MapperConfig)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.namespace.QName.getLocalPart()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRepeatedFieldName()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.namespace.QName.getNamespaceURI()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>javax.xml.stream</name>
        <class confirmed="no">
            <name>javax.xml.stream.XMLInputFactory</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLInputFactory()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLInputFactory(javax.xml.stream.XMLInputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(javax.xml.stream.XMLInputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.XmlTokenStreamTest()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._staxInputFactory</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLInputFactory.createXMLStreamReader(java.io.Reader)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLInputFactory.createXMLStreamReader(javax.xml.transform.Source)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLInputFactory.newInstance()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.XmlTokenStreamTest()</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLInputFactory.setProperty(java.lang.String, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>javax.xml.stream.XMLOutputFactory</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.dataformat.xml.XmlFactory, com.fasterxml.jackson.core.ObjectCodec)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlOutputFactory</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLOutputFactory()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLOutputFactory(javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(java.io.ObjectOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.XmlMapper(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(java.io.OutputStream, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLOutputFactory.createXMLStreamWriter(java.io.Writer)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLOutputFactory.newInstance()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.XmlFactory(com.fasterxml.jackson.core.ObjectCodec, int, int, javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLOutputFactory.setProperty(java.lang.String, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(javax.xml.stream.XMLInputFactory, javax.xml.stream.XMLOutputFactory)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>javax.xml.stream.XMLStreamException</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writePrologLinefeed(org.codehaus.stax2.XMLStreamWriter2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getValueAsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(org.codehaus.stax2.XMLStreamReader2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._skipUntilTag()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.closeCompletely()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writePrologLinefeed(org.codehaus.stax2.XMLStreamWriter2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonGenerator)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(javax.xml.stream.XMLStreamException, com.fasterxml.jackson.core.JsonParser)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwXmlAsIOException(javax.xml.stream.XMLStreamException)</inbound>
        </class>
        <class confirmed="no">
            <name>javax.xml.stream.XMLStreamReader</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.InputStream, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(java.io.Reader, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.core.type.TypeReference)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, com.fasterxml.jackson.databind.JavaType)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(javax.xml.stream.XMLStreamReader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.FromXmlParser(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getStaxReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLStreamReader.close()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLStreamReader.getEventType()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLStreamReader.getLocalName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLStreamReader.next()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(javax.xml.stream.XMLStreamReader)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest.testSimpleRead()</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLStreamReader.nextTag()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testEmptyTags(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest._testRootAttributes(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testNested()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStreamTest.testSimple()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>javax.xml.stream.XMLStreamWriter</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(javax.xml.stream.XMLStreamWriter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._originalXmlWriter</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getOutputTarget()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getStaxWriter()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLStreamWriter.close()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLStreamWriter.setDefaultNamespace(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(javax.xml.stream.XMLStreamWriter)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLStreamWriter.writeEndDocument()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLStreamWriter.writeEndElement()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.stream.XMLStreamWriter.writeStartElement(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest.testSimple()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>javax.xml.transform</name>
        <class confirmed="no">
            <name>javax.xml.transform.Source</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>junit.framework</name>
        <class confirmed="no">
            <name>junit.framework.TestCase</name>
            <inbound type="class" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase</inbound>
            <feature confirmed="no">
                <name>junit.framework.TestCase.TestCase()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlTestBase.XmlTestBase()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.codehaus.stax2</name>
        <class confirmed="no">
            <name>org.codehaus.stax2.LocationInfo</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentLocation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getTokenLocation()</inbound>
            <feature confirmed="no">
                <name>org.codehaus.stax2.LocationInfo.getCurrentLocation()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentLocation()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.LocationInfo.getStartLocation()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getTokenLocation()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.codehaus.stax2.XMLStreamLocation2</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(org.codehaus.stax2.XMLStreamLocation2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentLocation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getTokenLocation()</inbound>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamLocation2.getCharacterOffset()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(org.codehaus.stax2.XMLStreamLocation2)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamLocation2.getColumnNumber()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(org.codehaus.stax2.XMLStreamLocation2)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamLocation2.getLineNumber()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(org.codehaus.stax2.XMLStreamLocation2)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.codehaus.stax2.XMLStreamReader2</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getStaxReader()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(org.codehaus.stax2.XMLStreamReader2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._skipUntilTag()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.closeCompletely()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentLocation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getTokenLocation()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getXmlReader()</inbound>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.close()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.close()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.closeCompletely()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.closeCompletely()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.getAttributeCount()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.getAttributeLocalName(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.getAttributeNamespace(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.getAttributeValue(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.getEventType()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.getLocalName()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.getLocationInfo()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentLocation()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getTokenLocation()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.getNamespaceURI()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.convertToString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.getText()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(org.codehaus.stax2.XMLStreamReader2)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.hasNext()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._skipUntilTag()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.isEmptyElement()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamReader2.next()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._skipUntilTag()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.codehaus.stax2.XMLStreamWriter2</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writePrologLinefeed(org.codehaus.stax2.XMLStreamWriter2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getStaxWriter()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writePrologLinefeed(org.codehaus.stax2.XMLStreamWriter2)</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.close()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.closeCompletely()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.flush()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeBinary(byte[], int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeBinaryAttribute(java.lang.String, java.lang.String, java.lang.String, byte[])</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeBoolean(boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeBooleanAttribute(java.lang.String, java.lang.String, java.lang.String, boolean)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeCData(char[], int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeCData(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeCharacters(char[], int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeCharacters(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeDecimal(java.math.BigDecimal)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeDecimalAttribute(java.lang.String, java.lang.String, java.lang.String, java.math.BigDecimal)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeDouble(double)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeDoubleAttribute(java.lang.String, java.lang.String, java.lang.String, double)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeEmptyElement(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeEndElement()</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeFloat(float)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeFloatAttribute(java.lang.String, java.lang.String, java.lang.String, float)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeInt(int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeIntAttribute(java.lang.String, java.lang.String, java.lang.String, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeInteger(java.math.BigInteger)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeIntegerAttribute(java.lang.String, java.lang.String, java.lang.String, java.math.BigInteger)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeLong(long)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeLongAttribute(java.lang.String, java.lang.String, java.lang.String, long)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeRaw(char[], int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeRaw(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(org.codehaus.stax2.XMLStreamWriter2, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writePrologLinefeed(org.codehaus.stax2.XMLStreamWriter2)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeRaw(java.lang.String, int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeStartDocument(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.codehaus.stax2.XMLStreamWriter2.writeStartElement(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, char[], int, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, double)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, float)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, java.math.BigInteger)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(org.codehaus.stax2.XMLStreamWriter2, java.lang.String, java.lang.String)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.codehaus.stax2.io</name>
        <class confirmed="no">
            <name>org.codehaus.stax2.io.Stax2ByteArraySource</name>
            <feature confirmed="no">
                <name>org.codehaus.stax2.io.Stax2ByteArraySource.Stax2ByteArraySource(byte[], int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[], int, int, com.fasterxml.jackson.core.io.IOContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.codehaus.stax2.io.Stax2CharArraySource</name>
            <feature confirmed="no">
                <name>org.codehaus.stax2.io.Stax2CharArraySource.Stax2CharArraySource(char[], int, int)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[], int, int, com.fasterxml.jackson.core.io.IOContext, boolean)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.codehaus.stax2.ri</name>
        <class confirmed="no">
            <name>org.codehaus.stax2.ri.Stax2ReaderAdapter</name>
            <feature confirmed="no">
                <name>org.codehaus.stax2.ri.Stax2ReaderAdapter.wrapIfNecessary(javax.xml.stream.XMLStreamReader)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XmlTokenStream(javax.xml.stream.XMLStreamReader, java.lang.Object, int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.codehaus.stax2.ri.Stax2WriterAdapter</name>
            <feature confirmed="no">
                <name>org.codehaus.stax2.ri.Stax2WriterAdapter.wrapIfNecessary(javax.xml.stream.XMLStreamWriter)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.ToXmlGenerator(com.fasterxml.jackson.core.io.IOContext, int, int, com.fasterxml.jackson.core.ObjectCodec, javax.xml.stream.XMLStreamWriter)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.hamcrest</name>
        <class confirmed="no">
            <name>org.hamcrest.CoreMatchers</name>
            <feature confirmed="no">
                <name>org.hamcrest.CoreMatchers.instanceOf(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.hamcrest.Matcher</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>org.junit</name>
        <class confirmed="no">
            <name>org.junit.Assert</name>
            <feature confirmed="no">
                <name>org.junit.Assert.assertThat(java.lang.Object, org.hamcrest.Matcher)</name>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
                <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.junit.Test</name>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testBad()</inbound>
            <inbound type="feature" confirmed="yes">com.fasterxml.jackson.dataformat.xml.failing.PolymorphicList97Test.testGood()</inbound>
        </class>
    </package>
</dependencies>
